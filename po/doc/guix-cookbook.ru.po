# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR the authors of Guix (msgids) and the following authors (msgstr)
# This file is distributed under the same license as the guix manual package.
# Anton Ryzhkin <torm84@gmail.com>, 2021.
# Helge Kim <helge@keemail.me>, 2021.
# Alex Matkovsky <matkovsky88@protonmail.ch>, 2023.
# Aleksei Chepugov <a.chepugov@gmail.com>, 2024.
# Weblate Translation Memory <noreply-mt-weblate-translation-memory@weblate.org>, 2024, 2025.
# Florian Pelz <pelzflorian@pelzflorian.de>, 2024, 2025.
# Aleksej Chepugov <a.chepugov@gmail.com>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: guix manual checkout\n"
"Report-Msgid-Bugs-To: bug-guix@gnu.org\n"
"POT-Creation-Date: 2025-02-20 03:18+0000\n"
"PO-Revision-Date: 2025-02-27 18:04+0000\n"
"Last-Translator: Florian Pelz <pelzflorian@pelzflorian.de>\n"
"Language-Team: Russian <https://translate.fedoraproject.org/projects/guix/documentation-cookbook/ru/>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
"X-Generator: Weblate 5.10\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:7
msgid "@documentencoding UTF-8"
msgstr "@documentencoding UTF-8"

#. type: top
#: guix-git/doc/guix-cookbook.texi:7 guix-git/doc/guix-cookbook.texi:43
#: guix-git/doc/guix-cookbook.texi:57
#, no-wrap
msgid "GNU Guix Cookbook"
msgstr "GNU Guix Рецепты"

#. type: copying
#: guix-git/doc/guix-cookbook.texi:28
msgid "Copyright @copyright{} 2019, 2022 Ricardo Wurmus@* Copyright @copyright{} 2019 Efraim Flashner@* Copyright @copyright{} 2019 Pierre Neidhardt@* Copyright @copyright{} 2020 Oleg Pykhalov@* Copyright @copyright{} 2020 Matthew Brooks@* Copyright @copyright{} 2020 Marcin Karpezo@* Copyright @copyright{} 2020 Brice Waegeneire@* Copyright @copyright{} 2020 André Batista@* Copyright @copyright{} 2020 Christine Lemmer-Webber@* Copyright @copyright{} 2021 Joshua Branson@* Copyright @copyright{} 2022, 2023 Maxim Cournoyer@* Copyright @copyright{} 2023-2024 Ludovic Courtès@* Copyright @copyright{} 2023 Thomas Ieong@* Copyright @copyright{} 2024 Florian Pelz@*"
msgstr "Copyright @copyright{} 2019, 2022 Ricardo Wurmus@* Copyright @copyright{} 2019 Efraim Flashner@* Copyright @copyright{} 2019 Pierre Neidhardt@* Copyright @copyright{} 2020 Oleg Pykhalov@* Copyright @copyright{} 2020 Matthew Brooks@* Copyright @copyright{} 2020 Marcin Karpezo@* Copyright @copyright{} 2020 Brice Waegeneire@* Copyright @copyright{} 2020 André Batista@* Copyright @copyright{} 2020 Christine Lemmer-Webber@* Copyright @copyright{} 2021 Joshua Branson@* Copyright @copyright{} 2022, 2023 Maxim Cournoyer@* Copyright @copyright{} 2023-2024 Ludovic Courtès@* Copyright @copyright{} 2023 Thomas Ieong@* Copyright @copyright{} 2024 Florian Pelz@*"

#. type: copying
#: guix-git/doc/guix-cookbook.texi:35
msgid "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is included in the section entitled ``GNU Free Documentation License''."
msgstr "Разрешено копирование, распространение и/или модификация этого документа на условиях лицензии свободной документации GNU (GNU FDL) версии 1.3 или любой более поздней версии, опубликованной Фондом свободного программного обеспечения (FSF), исключая неизменяемые секции, исключая тексты, размещенные на переплёте и задней стороне обложки. Копия лицензии включена в документ в разделе под названием \"GNU Free Documentation Licens\"."

#. type: dircategory
#: guix-git/doc/guix-cookbook.texi:37
#, no-wrap
msgid "System administration"
msgstr "Администрирование системы"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:40
msgid "Guix cookbook: (guix-cookbook)"
msgstr "Guix рецепты: (guix-cookbook.ru)"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:40
msgid "Tutorials and examples for GNU Guix."
msgstr "Учебники и примеры по GNU Guix."

#. type: subtitle
#: guix-git/doc/guix-cookbook.texi:44
#, no-wrap
msgid "Tutorials and examples for using the GNU Guix Functional Package Manager"
msgstr "Учебники и примеры по использованию функционального менеджера пакетов GNU Guix"

#. type: author
#: guix-git/doc/guix-cookbook.texi:45
#, no-wrap
msgid "The GNU Guix Developers"
msgstr "Разработчики GNU Guix"

#. type: node
#: guix-git/doc/guix-cookbook.texi:56
#, no-wrap
msgid "Top"
msgstr "Top"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:63
msgid "This document presents tutorials and detailed examples for GNU@tie{}Guix, a functional package management tool written for the GNU system.  Please @pxref{Top,,, guix, GNU Guix reference manual} for details about the system, its API, and related concepts."
msgstr "В этом документе представлены учебные пособия и подробные примеры для GNU@tie{}Guix, инструмента для функционального управления пакетами, написанного для системы GNU. Пожалуйста, @pxref{Top,,, guix.ru, справочное руководство GNU Guix} для получения подробной информации о системе, ее API и связанных с ней идеях."

#.  You can replace the following paragraph with information on
#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:78
msgid "This manual is also available in French (@pxref{Top,,, guix-cookbook.fr, Livre de recettes de GNU Guix}), German (@pxref{Top,,, guix-cookbook.de, GNU-Guix-Kochbuch}), Korean (@pxref{Top,,, guix-cookbook.ko, GNU Guix 쿡북}), Brazilian Portuguese (@pxref{Top,,, guix-cookbook.pt_BR, Livro de receitas do GNU Guix}), Russian (@pxref{Top,,, guix-cookbook.ru, GNU Guix Рецепты}), Slovak (@pxref{Top,,, guix-cookbook.sk, Receptár GNU Guix}), and Swedish (@pxref{Top,,, guix-cookbook.sv, Kokbok för GNU Guix}).  If you would like to translate this document in your native language, consider joining @uref{https://translate.fedoraproject.org/projects/guix/documentation-cookbook, Weblate} (@pxref{Translating Guix,,, guix, GNU Guix Reference Manual})."
msgstr "Это руководство также доступно на английском (@pxref{Top,,, guix-cookbook, GNU Guix Cookbook}), французском (@pxref{Top,,, guix-cookbook.fr, Livre de recettes de GNU Guix}), немецком (@pxref{Top,,, guix-cookbook.de, GNU-Guix-Kochbuch}), корейском (@pxref{Top,,, guix-cookbook.ko, GNU Guix 쿡북}), бразильский португальский (@pxref{Top,,, guix-cookbook.pt_BR, Livro de receitas do GNU Guix}), словацкий (@pxref{Top,,, guix-cookbook.sk, Receptár GNU Guix}) и шведский (@pxref{Top,, guix-cookbook.sv, Kokbok för GNU Guix}).  Если вы хотите перевести этот документ на свой родной язык, присоединяйтесь к @uref{https://translate.fedoraproject.org/projects/guix/documentation-cookbook, Weblate} (@pxref{Перевод Guix на другие языки,,, guix.ru, Руководство по GNU Guix})."

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:90 guix-git/doc/guix-cookbook.texi:99
#: guix-git/doc/guix-cookbook.texi:211 guix-git/doc/guix-cookbook.texi:212
#, no-wrap
msgid "Scheme tutorials"
msgstr "Учебник по Scheme"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:90
msgid "Meet your new favorite language!"
msgstr "Встречайте свой новый любимый язык!"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:90 guix-git/doc/guix-cookbook.texi:103
#: guix-git/doc/guix-cookbook.texi:504 guix-git/doc/guix-cookbook.texi:505
#, no-wrap
msgid "Packaging"
msgstr "Управление пакетами"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:90
msgid "Packaging tutorials"
msgstr "Руководство по управлению пакетами"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:90 guix-git/doc/guix-cookbook.texi:130
#: guix-git/doc/guix-cookbook.texi:1596 guix-git/doc/guix-cookbook.texi:1597
#, no-wrap
msgid "System Configuration"
msgstr "Настройка системы"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:90
msgid "Customizing the GNU System"
msgstr "Настройка системы GNU"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:90 guix-git/doc/guix-cookbook.texi:155
#: guix-git/doc/guix-cookbook.texi:3336 guix-git/doc/guix-cookbook.texi:3337
#, no-wrap
msgid "Containers"
msgstr "Контейнеры"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:90
msgid "Isolated environments and nested systems"
msgstr "Изолированные среды и встроенные системы"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:90 guix-git/doc/guix-cookbook.texi:165
#: guix-git/doc/guix-cookbook.texi:3739 guix-git/doc/guix-cookbook.texi:3740
#, no-wrap
msgid "Virtual Machines"
msgstr "Виртуальные машины"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:90
msgid "Virtual machines usage and configuration"
msgstr "Использование и настройка виртуальных машин"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:90 guix-git/doc/guix-cookbook.texi:170
#: guix-git/doc/guix-cookbook.texi:3972 guix-git/doc/guix-cookbook.texi:3973
#, no-wrap
msgid "Advanced package management"
msgstr "Расширенное управление пакетами"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:90
msgid "Power to the users!"
msgstr "Власть пользователям!"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:90 guix-git/doc/guix-cookbook.texi:182
#: guix-git/doc/guix-cookbook.texi:4380 guix-git/doc/guix-cookbook.texi:4381
#, no-wrap
msgid "Software Development"
msgstr "Разработка программного обеспечения"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:90
msgid "Environments, continuous integration, etc."
msgstr "Окружения среды, непрерывная интеграция и т. д."

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:90 guix-git/doc/guix-cookbook.texi:192
#: guix-git/doc/guix-cookbook.texi:5029 guix-git/doc/guix-cookbook.texi:5030
#, no-wrap
msgid "Environment management"
msgstr "Управление окружающей средой"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:90
msgid "Control environment"
msgstr "Управление окружением"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:90 guix-git/doc/guix-cookbook.texi:196
#: guix-git/doc/guix-cookbook.texi:5155 guix-git/doc/guix-cookbook.texi:5156
#, no-wrap
msgid "Installing Guix on a Cluster"
msgstr "Installing Guix on a Cluster"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:90
msgid "High-performance computing."
msgstr "Высокопроизводительные вычисления."

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:90 guix-git/doc/guix-cookbook.texi:204
#: guix-git/doc/guix-cookbook.texi:5542 guix-git/doc/guix-cookbook.texi:5543
#, no-wrap
msgid "Guix System Management"
msgstr "Управление системой Guix"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:90
msgid "System Management specifics."
msgstr "Особенности управления системой."

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:94 guix-git/doc/guix-cookbook.texi:5641
#: guix-git/doc/guix-cookbook.texi:5642
#, no-wrap
msgid "Acknowledgments"
msgstr "Благодарности"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:94
msgid "Thanks!"
msgstr "Спасибо!"

#. type: appendix
#: guix-git/doc/guix-cookbook.texi:94 guix-git/doc/guix-cookbook.texi:5668
#: guix-git/doc/guix-cookbook.texi:5669
#, no-wrap
msgid "GNU Free Documentation License"
msgstr "Лицензия свободной документации GNU"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:94
msgid "The license of this document."
msgstr "Лицензия этого документа."

#. type: unnumbered
#: guix-git/doc/guix-cookbook.texi:94 guix-git/doc/guix-cookbook.texi:5674
#: guix-git/doc/guix-cookbook.texi:5675
#, no-wrap
msgid "Concept Index"
msgstr "Термины и указатели"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:94
msgid "Concepts."
msgstr "Понятия."

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:97
msgid "--- The Detailed Node Listing ---"
msgstr "--- Детальный список записей ---"

#. type: section
#: guix-git/doc/guix-cookbook.texi:101 guix-git/doc/guix-cookbook.texi:227
#: guix-git/doc/guix-cookbook.texi:229 guix-git/doc/guix-cookbook.texi:230
#, no-wrap
msgid "A Scheme Crash Course"
msgstr "Ускоренный курс по Scheme"

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:107
#: guix-git/doc/guix-cookbook.texi:516 guix-git/doc/guix-cookbook.texi:518
#: guix-git/doc/guix-cookbook.texi:519
#, no-wrap
msgid "Packaging Tutorial"
msgstr "Руководство по пакетам"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:516
msgid "A tutorial on how to add packages to Guix."
msgstr "Учебник о том, как добавлять пакеты в Guix."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:116 guix-git/doc/guix-cookbook.texi:566
#: guix-git/doc/guix-cookbook.texi:568 guix-git/doc/guix-cookbook.texi:569
#, no-wrap
msgid "A ``Hello World'' package"
msgstr "Пакет ``Hello World''"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:116 guix-git/doc/guix-cookbook.texi:118
#: guix-git/doc/guix-cookbook.texi:566 guix-git/doc/guix-cookbook.texi:759
#: guix-git/doc/guix-cookbook.texi:760
#, no-wrap
msgid "Setup"
msgstr "Настройка"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:116 guix-git/doc/guix-cookbook.texi:566
#: guix-git/doc/guix-cookbook.texi:999 guix-git/doc/guix-cookbook.texi:1000
#, no-wrap
msgid "Extended example"
msgstr "Расширенный пример"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:116 guix-git/doc/guix-cookbook.texi:566
#: guix-git/doc/guix-cookbook.texi:1412 guix-git/doc/guix-cookbook.texi:1413
#, no-wrap
msgid "Other build systems"
msgstr "Другие системы сборки"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:116 guix-git/doc/guix-cookbook.texi:124
#: guix-git/doc/guix-cookbook.texi:566 guix-git/doc/guix-cookbook.texi:1430
#: guix-git/doc/guix-cookbook.texi:1431
#, no-wrap
msgid "Programmable and automated package definition"
msgstr "Программируемое и автоматизированное определение пакетов"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:116 guix-git/doc/guix-cookbook.texi:566
#: guix-git/doc/guix-cookbook.texi:1547 guix-git/doc/guix-cookbook.texi:1548
#, no-wrap
msgid "Getting help"
msgstr "Получить помощь"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:116 guix-git/doc/guix-cookbook.texi:566
#: guix-git/doc/guix-cookbook.texi:1560 guix-git/doc/guix-cookbook.texi:1561
#, no-wrap
msgid "Conclusion"
msgstr "Заключение"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:116 guix-git/doc/guix-cookbook.texi:566
#: guix-git/doc/guix-cookbook.texi:1581 guix-git/doc/guix-cookbook.texi:1582
#, no-wrap
msgid "References"
msgstr "Ссылки"

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:122 guix-git/doc/guix-cookbook.texi:777
#: guix-git/doc/guix-cookbook.texi:779 guix-git/doc/guix-cookbook.texi:780
#, no-wrap
msgid "Local file"
msgstr "Локальный файл"

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:122 guix-git/doc/guix-cookbook.texi:777
#: guix-git/doc/guix-cookbook.texi:799 guix-git/doc/guix-cookbook.texi:800
#, no-wrap
msgid "Channels"
msgstr "Каналы"

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:122 guix-git/doc/guix-cookbook.texi:777
#: guix-git/doc/guix-cookbook.texi:913 guix-git/doc/guix-cookbook.texi:914
#, no-wrap
msgid "Direct checkout hacking"
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:128 guix-git/doc/guix-cookbook.texi:1442
#: guix-git/doc/guix-cookbook.texi:1444 guix-git/doc/guix-cookbook.texi:1445
#, no-wrap
msgid "Recursive importers"
msgstr "Рекурсивные импортеры"

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:128 guix-git/doc/guix-cookbook.texi:1442
#: guix-git/doc/guix-cookbook.texi:1503 guix-git/doc/guix-cookbook.texi:1504
#, no-wrap
msgid "Automatic update"
msgstr "Автоматическое обновление"

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:128 guix-git/doc/guix-cookbook.texi:1442
#: guix-git/doc/guix-cookbook.texi:1521 guix-git/doc/guix-cookbook.texi:1522
#, no-wrap
msgid "Inheritance"
msgstr "Наследование"

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:1622 guix-git/doc/guix-cookbook.texi:1623
#, no-wrap
msgid "Auto-Login to a Specific TTY"
msgstr "Автоматический вход на заданный TTY"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Automatically Login a User to a Specific TTY"
msgstr "Автоматический вход пользователя на заданный TTY"

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:1667 guix-git/doc/guix-cookbook.texi:1668
#, no-wrap
msgid "Customizing the Kernel"
msgstr "Настройка ядра"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Creating and using a custom Linux kernel on Guix System."
msgstr "Создание и использование собственного ядра Linux в системе Guix."

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:1907 guix-git/doc/guix-cookbook.texi:1908
#, no-wrap
msgid "Guix System Image API"
msgstr "API образа Guix системы"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Customizing images to target specific platforms."
msgstr "Настройка образов для конкретных платформ."

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:2124 guix-git/doc/guix-cookbook.texi:2125
#, no-wrap
msgid "Using security keys"
msgstr "Использование ключей безопасности"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "How to use security keys with Guix System."
msgstr "Как использовать ключи безопасности с системой Guix."

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:2246 guix-git/doc/guix-cookbook.texi:2247
#, no-wrap
msgid "Dynamic DNS mcron job"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Job to update the IP address behind a DuckDNS host name."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:2299 guix-git/doc/guix-cookbook.texi:2300
#, no-wrap
msgid "Connecting to Wireguard VPN"
msgstr "Подключение к Wireguard VPN"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Connecting to a Wireguard VPN."
msgstr "Подключение к Wireguard VPN."

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:146
#: guix-git/doc/guix-cookbook.texi:1620 guix-git/doc/guix-cookbook.texi:2376
#: guix-git/doc/guix-cookbook.texi:2377
#, no-wrap
msgid "Customizing a Window Manager"
msgstr "Настройка оконного менеджера"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Handle customization of a Window manager on Guix System."
msgstr "Управление настройкой оконного менеджера в системе Guix."

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:2481 guix-git/doc/guix-cookbook.texi:2482
#, no-wrap
msgid "Running Guix on a Linode Server"
msgstr "Запуск Guix на сервере Linode"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Running Guix on a Linode Server."
msgstr "Запуск Guix на сервере Linode."

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:2722 guix-git/doc/guix-cookbook.texi:2723
#, no-wrap
msgid "Running Guix on a Kimsufi Server"
msgstr "Запуск Guix на сервере Kimsufi"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Running Guix on a Kimsufi Server."
msgstr "Запуск Guix на сервере Kimsufi."

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:2969 guix-git/doc/guix-cookbook.texi:2970
#, no-wrap
msgid "Setting up a bind mount"
msgstr "Настройка привязки"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Setting up a bind mount in the file-systems definition."
msgstr "Настройка привязки при определении файловых систем."

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:3023 guix-git/doc/guix-cookbook.texi:3024
#, no-wrap
msgid "Getting substitutes from Tor"
msgstr "Получение подмен из Tor"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Configuring Guix daemon to get substitutes through Tor."
msgstr "Настройка демона Guix для получения подстановок через Tor."

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:3087 guix-git/doc/guix-cookbook.texi:3088
#, no-wrap
msgid "Setting up NGINX with Lua"
msgstr "Настройка NGINX с Lua"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Configuring NGINX web-server to load Lua modules."
msgstr "Настройка веб-сервера NGINX для загрузки модулей Lua."

#. type: section
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
#: guix-git/doc/guix-cookbook.texi:3144 guix-git/doc/guix-cookbook.texi:3145
#, no-wrap
msgid "Music Server with Bluetooth Audio"
msgstr "Музыкальный сервер с Bluetooth-аудио"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:144 guix-git/doc/guix-cookbook.texi:1620
msgid "Headless music player with Bluetooth output."
msgstr "Безинтерфейсный music player with Bluetooth output."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:149 guix-git/doc/guix-cookbook.texi:2383
#: guix-git/doc/guix-cookbook.texi:2385 guix-git/doc/guix-cookbook.texi:2386
#, no-wrap
msgid "StumpWM"
msgstr "StumpWM"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:149 guix-git/doc/guix-cookbook.texi:151
#: guix-git/doc/guix-cookbook.texi:2383 guix-git/doc/guix-cookbook.texi:2433
#: guix-git/doc/guix-cookbook.texi:2434
#, no-wrap
msgid "Session lock"
msgstr "Блокировка сессии"

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:153 guix-git/doc/guix-cookbook.texi:2444
#: guix-git/doc/guix-cookbook.texi:2446 guix-git/doc/guix-cookbook.texi:2447
#, no-wrap
msgid "Xorg"
msgstr "Xorg"

#. type: section
#: guix-git/doc/guix-cookbook.texi:158 guix-git/doc/guix-cookbook.texi:3363
#: guix-git/doc/guix-cookbook.texi:3365 guix-git/doc/guix-cookbook.texi:3366
#, no-wrap
msgid "Guix Containers"
msgstr "Guix Контейнеры"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:158 guix-git/doc/guix-cookbook.texi:3363
msgid "Perfectly isolated environments"
msgstr "Идеально изолированные окружения"

#. type: section
#: guix-git/doc/guix-cookbook.texi:158 guix-git/doc/guix-cookbook.texi:160
#: guix-git/doc/guix-cookbook.texi:3363 guix-git/doc/guix-cookbook.texi:3514
#: guix-git/doc/guix-cookbook.texi:3515
#, no-wrap
msgid "Guix System Containers"
msgstr "Guix System контейнеры"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:158 guix-git/doc/guix-cookbook.texi:3363
msgid "A system inside your system"
msgstr "Система внутри вашей системы"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:163 guix-git/doc/guix-cookbook.texi:3549
#: guix-git/doc/guix-cookbook.texi:3551 guix-git/doc/guix-cookbook.texi:3552
#, no-wrap
msgid "A Database Container"
msgstr "Контейнер базы данных"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:163 guix-git/doc/guix-cookbook.texi:3549
#: guix-git/doc/guix-cookbook.texi:3663 guix-git/doc/guix-cookbook.texi:3664
#, no-wrap
msgid "Container Networking"
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:168 guix-git/doc/guix-cookbook.texi:3752
#: guix-git/doc/guix-cookbook.texi:3754 guix-git/doc/guix-cookbook.texi:3755
#, no-wrap
msgid "Network bridge for QEMU"
msgstr "Сетевый мост для QEMU"

#. type: section
#: guix-git/doc/guix-cookbook.texi:168 guix-git/doc/guix-cookbook.texi:3752
#: guix-git/doc/guix-cookbook.texi:3877 guix-git/doc/guix-cookbook.texi:3878
#, no-wrap
msgid "Routed network for libvirt"
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:172 guix-git/doc/guix-cookbook.texi:174
#: guix-git/doc/guix-cookbook.texi:3986 guix-git/doc/guix-cookbook.texi:3988
#: guix-git/doc/guix-cookbook.texi:3989
#, no-wrap
msgid "Guix Profiles in Practice"
msgstr "Guix профили на практике"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:172 guix-git/doc/guix-cookbook.texi:3986
msgid "Strategies for multiple profiles and manifests."
msgstr "Стратегии для множества профилей и манифестов."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:180 guix-git/doc/guix-cookbook.texi:4080
#: guix-git/doc/guix-cookbook.texi:4082 guix-git/doc/guix-cookbook.texi:4083
#, no-wrap
msgid "Basic setup with manifests"
msgstr "Базовая настройка с манифестами"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:180 guix-git/doc/guix-cookbook.texi:4080
#: guix-git/doc/guix-cookbook.texi:4218 guix-git/doc/guix-cookbook.texi:4219
#, no-wrap
msgid "Required packages"
msgstr "Требуемые пакеты"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:180 guix-git/doc/guix-cookbook.texi:4080
#: guix-git/doc/guix-cookbook.texi:4246 guix-git/doc/guix-cookbook.texi:4247
#, no-wrap
msgid "Default profile"
msgstr "Профиль по-умолчанию"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:180 guix-git/doc/guix-cookbook.texi:4080
#: guix-git/doc/guix-cookbook.texi:4265 guix-git/doc/guix-cookbook.texi:4266
#, no-wrap
msgid "The benefits of manifests"
msgstr "Преимущества манифестов"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:180 guix-git/doc/guix-cookbook.texi:4080
#: guix-git/doc/guix-cookbook.texi:4340 guix-git/doc/guix-cookbook.texi:4341
#, no-wrap
msgid "Reproducible profiles"
msgstr "Воспроизводимые профили"

#. type: section
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
#: guix-git/doc/guix-cookbook.texi:4415 guix-git/doc/guix-cookbook.texi:4416
#, no-wrap
msgid "Getting Started"
msgstr "Начало работы"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
msgid "Step 0: using `guix shell'."
msgstr "Шаг 0: использование `guix shell'."

#. type: node
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
#: guix-git/doc/guix-cookbook.texi:4535
#, no-wrap
msgid "Building with Guix"
msgstr "Сборка с Guix"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
msgid "Step 1: building your code."
msgstr "Шаг 1: Создание вашего кода."

#. type: node
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
#: guix-git/doc/guix-cookbook.texi:4625
#, no-wrap
msgid "The Repository as a Channel"
msgstr "Репозиторий как канал"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
msgid "Step 2: turning the repo in a channel."
msgstr "Шаг 2: превращение репозитория в канал."

#. type: node
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
#: guix-git/doc/guix-cookbook.texi:4761
#, no-wrap
msgid "Package Variants"
msgstr "Варианты пакета"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
msgid "Bonus: Defining variants."
msgstr "Бонус: Определение вариантов."

#. type: node
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
#: guix-git/doc/guix-cookbook.texi:4813
#, no-wrap
msgid "Setting Up Continuous Integration"
msgstr "Настройка непрерывной интеграции"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
msgid "Step 3: continuous integration."
msgstr "Шаг 3: непрерывная интеграция."

#. type: node
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
#: guix-git/doc/guix-cookbook.texi:4888
#, no-wrap
msgid "Build Manifest"
msgstr "Манифест сборки"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
msgid "Bonus: Manifest."
msgstr "Бонус: Манифест."

#. type: section
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
#: guix-git/doc/guix-cookbook.texi:4981 guix-git/doc/guix-cookbook.texi:4982
#, no-wrap
msgid "Wrapping Up"
msgstr "Подводя итоги"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:190 guix-git/doc/guix-cookbook.texi:4413
msgid "Recap."
msgstr "Резюме."

#. type: section
#: guix-git/doc/guix-cookbook.texi:194 guix-git/doc/guix-cookbook.texi:5037
#: guix-git/doc/guix-cookbook.texi:5039 guix-git/doc/guix-cookbook.texi:5040
#, no-wrap
msgid "Guix environment via direnv"
msgstr "Окружение Guix через direnv"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:194 guix-git/doc/guix-cookbook.texi:5037
msgid "Setup Guix environment with direnv"
msgstr "Установка среды Guix с direnv"

#. type: section
#: guix-git/doc/guix-cookbook.texi:202 guix-git/doc/guix-cookbook.texi:5184
#: guix-git/doc/guix-cookbook.texi:5186 guix-git/doc/guix-cookbook.texi:5187
#, no-wrap
msgid "Setting Up a Head Node"
msgstr "Настройка головного узла"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:202 guix-git/doc/guix-cookbook.texi:5184
msgid "The node that runs the daemon."
msgstr "Узел, запускающий демон."

#. type: section
#: guix-git/doc/guix-cookbook.texi:202 guix-git/doc/guix-cookbook.texi:5184
#: guix-git/doc/guix-cookbook.texi:5294 guix-git/doc/guix-cookbook.texi:5295
#, no-wrap
msgid "Setting Up Compute Nodes"
msgstr "Настройка вычислительных узлов"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:202 guix-git/doc/guix-cookbook.texi:5184
msgid "Client nodes."
msgstr "Клиентские узлы."

#. type: node
#: guix-git/doc/guix-cookbook.texi:202 guix-git/doc/guix-cookbook.texi:5184
#: guix-git/doc/guix-cookbook.texi:5383
#, no-wrap
msgid "Cluster Network Access"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:202 guix-git/doc/guix-cookbook.texi:5184
msgid "Dealing with network access restrictions."
msgstr "Решение проблем с ограничениями доступа к сети."

#. type: node
#: guix-git/doc/guix-cookbook.texi:202 guix-git/doc/guix-cookbook.texi:5184
#: guix-git/doc/guix-cookbook.texi:5469
#, no-wrap
msgid "Cluster Disk Usage"
msgstr "Использование кластерного диска"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:202 guix-git/doc/guix-cookbook.texi:5184
msgid "Disk usage considerations."
msgstr ""

#. type: node
#: guix-git/doc/guix-cookbook.texi:202 guix-git/doc/guix-cookbook.texi:5184
#: guix-git/doc/guix-cookbook.texi:5514
#, no-wrap
msgid "Cluster Security Considerations"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:202 guix-git/doc/guix-cookbook.texi:5184
msgid "Keeping the cluster secure."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:206 guix-git/doc/guix-cookbook.texi:5554
#: guix-git/doc/guix-cookbook.texi:5556 guix-git/doc/guix-cookbook.texi:5557
#, no-wrap
msgid "Upgrade Postgres for Cuirass"
msgstr "Обновить Postgres для Cuirass"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:206
msgid "How to handle deprecation of the default postgres package."
msgstr "Как обработать 'устаревание' пакета postgres по умолчанию."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:218
msgid "GNU@tie{}Guix is written in the general purpose programming language Scheme, and many of its features can be accessed and manipulated programmatically.  You can use Scheme to generate package definitions, to modify them, to build them, to deploy whole operating systems, etc."
msgstr "GNU@tie{}Guix написан на языке программирования общего назначения Scheme, и многие его функции могут быть доступны и управляться программным образом. Scheme может быть использована для генерации определений пакетов, их модификации, сборки, установки всей операционной системы и т.д."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:222
msgid "Knowing the basics of how to program in Scheme will unlock many of the advanced features Guix provides --- and you don't even need to be an experienced programmer to use them!"
msgstr "Знание основ программирования на Scheme сделает доступными многие расширенные функции Guix обеспечивает --- и вам даже не нужно быть опытным программистом для их использования!"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:224
msgid "Let's get started!"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:232
#, no-wrap
msgid "Scheme, crash course"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:238
msgid "Guix uses the Guile implementation of Scheme.  To start playing with the language, install it with @code{guix install guile} and start a @dfn{REPL}---short for @uref{https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop, @dfn{read-eval-print loop}}---by running @code{guile} from the command line."
msgstr "Guix использует Guile имплементацию Scheme. Чтобы опробовать язык, установите его с помощью @code{guix install guile} и запустите @dfn{REPL}---сокращение от @uref{https://ru.wikipedia.org/wiki/REPL, @dfn{read-eval-print loop}}---запустив @code{guile} в командной строке."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:241
msgid "Alternatively you can also run @code{guix shell guile -- guile} if you'd rather not have Guile installed in your user profile."
msgstr "Кроме того, вы можете запускать @code{guix shell guile -- guile}, если у вас нет Guile в профиле пользователя."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:247
msgid "In the following examples, lines show what you would type at the REPL; lines starting with ``@result{}'' show evaluation results, while lines starting with ``@print{}'' show things that get printed.  @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, for more details on the REPL."
msgstr "В следующих примерах строки показывают то, что вы будете вводить в REPL; строки, начинающиеся с ``@result{}'', показывают вычислительные результаты, в то время как строки, начинающиеся с ``@print{}'', показывают напечатанные вещи. @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, для более подробной информации о REPL."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:255
msgid "Scheme syntax boils down to a tree of expressions (or @emph{s-expression} in Lisp lingo).  An expression can be a literal such as numbers and strings, or a compound which is a parenthesized list of compounds and literals.  @code{#true} and @code{#false} (abbreviated @code{#t} and @code{#f}) stand for the Booleans ``true'' and ``false'', respectively."
msgstr "Синтаксис Scheme сводится к дереву выражений (или @emph{s-expression} на  Lisp lingo). Выражение может быть литеральным, таким как цифры и строки, или составным, который представляет собой обернутый в скобки список составных выражений и литералов. @code{#true} и @code{#false} (сокращенно @code{#t} и @code{#f}) представляет логические `true'' and ``false'' соответственно."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:257
msgid "Examples of valid expressions:"
msgstr "Примеры допустимых выражений:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:261
#, no-wrap
msgid ""
"\"Hello World!\"\n"
"@result{} \"Hello World!\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:264
#, no-wrap
msgid ""
"17\n"
"@result{} 17\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:268
#, no-wrap
msgid ""
"(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@print{} Hello Guix!\n"
"@result{} #<unspecified>\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:275
msgid "This last example is a function call nested in another function call.  When a parenthesized expression is evaluated, the first term is the function and the rest are the arguments passed to the function.  Every function returns the last evaluated expression as its return value."
msgstr "В последнем примере это вызов функции вложенный в другой вызов функции. Когда вычисляется скобочное выражения, первым термом является функция, а остальные аргументы передаются в функцию. Каждая функция возвращает последнее вычисляемое выражение как возвращаемое значение."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:279
msgid "Anonymous functions---@dfn{procedures} in Scheme parlance---are declared with the @code{lambda} term:"
msgstr "Анонимные функции --@dfn{procedures} на жаргоне Scheme ---определены с помощью @code{lambda}:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:283
#, no-wrap
msgid ""
"(lambda (x) (* x x))\n"
"@result{} #<procedure 120e348 at <unknown port>:24:0 (x)>\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:288
msgid "The above procedure returns the square of its argument.  Since everything is an expression, the @code{lambda} expression returns an anonymous procedure, which can in turn be applied to an argument:"
msgstr "Вышеприведенная процедура возвращает квадрат его аргумента. Поскольку все это выражение, @code{lambda} выражение возвращает анонимную процедуру, которая в свою очередь может быть применена к аргументу:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:292
#, no-wrap
msgid ""
"((lambda (x) (* x x)) 3)\n"
"@result{} 9\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:296
msgid "Procedures are regular values just like numbers, strings, Booleans, and so on."
msgstr "Процедуры - это обычные значения, такие как числа, строки, логические значения и так далее."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:299
msgid "Anything can be assigned a global name with @code{define}:"
msgstr "Что угодно может быть присвоено в глобальное имя с помощью @code{define}:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:305
#, no-wrap
msgid ""
"(define a 3)\n"
"(define square (lambda (x) (* x x)))\n"
"(square a)\n"
"@result{} 9\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:309
msgid "Procedures can be defined more concisely with the following syntax:"
msgstr "Процедуры могут быть определены более кратко с помощью следующего синтаксиса:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:312
#, no-wrap
msgid "(define (square x) (* x x))\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:316
msgid "A list structure can be created with the @code{list} procedure:"
msgstr "Списочная структура  может быть создана с помощью процедур @code{list}:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:320
#, no-wrap
msgid ""
"(list 2 a 5 7)\n"
"@result{} (2 3 5 7)\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:327
msgid "Standard procedures are provided by the @code{(srfi srfi-1)} module to create and process lists (@pxref{SRFI-1, list processing,, guile, GNU Guile Reference Manual}).  Here are some of the most useful ones in action:"
msgstr "Стандартные процедуры предоставляются модулем @code{(srfi srfi-1)} для создания и обработки списков (@pxref{SRFI-1, list processing,, GNU Guile Reference Manual}). Вот некоторые из наиболее полезных в работе:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:330
#, no-wrap
msgid ""
"(use-modules (srfi srfi-1))  ;import list processing procedures\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:333
#, no-wrap
msgid ""
"(append (list 1 2) (list 3 4))\n"
"@result{} (1 2 3 4)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:336
#, no-wrap
msgid ""
"(map (lambda (x) (* x x)) (list 1 2 3 4))\n"
"@result{} (1 4 9 16)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:341
#, no-wrap
msgid ""
"(delete 3 (list 1 2 3 4))        @result{} (1 2 4)\n"
"(filter odd? (list 1 2 3 4))     @result{} (1 3)\n"
"(remove even? (list 1 2 3 4))    @result{} (1 3)\n"
"(find number? (list \"a\" 42 \"b\")) @result{} 42\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:345
msgid "Notice how the first argument to @code{map}, @code{filter}, @code{remove}, and @code{find} is a procedure!"
msgstr "Обратите внимание, что первый аргумент @code{map}, @code{filter}, @code{remove} и @code{find} это процедура!"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:347
#, no-wrap
msgid "S-expression"
msgstr "S-выражение"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:352
msgid "The @dfn{quote} disables evaluation of a parenthesized expression, also called an S-expression or ``s-exp'': the first term is not called over the other terms (@pxref{Expression Syntax, quote,, guile, GNU Guile Reference Manual}).  Thus it effectively returns a list of terms."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:356
#, no-wrap
msgid ""
"'(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@result{} (display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:359
#, no-wrap
msgid ""
"'(2 a 5 7)\n"
"@result{} (2 a 5 7)\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:366
msgid "The @code{quasiquote} (@code{`}, a backquote) disables evaluation of a parenthesized expression until @code{unquote} (@code{,}, a comma)  re-enables it.  Thus it provides us with fine-grained control over what is evaluated and what is not."
msgstr "@code{quasiquote} (@code{`}, обратная кавычка) запрещает вычисление выражения в круглых скобках, пока  @code{unquote} (@code{,}, запятая) повторно его не включит. Таким образом, он обеспечивает нам четкий контроль над тем, что вычисляется и что нет."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:370
#, no-wrap
msgid ""
"`(2 a 5 7 (2 ,a 5 ,(+ a 4)))\n"
"@result{} (2 a 5 7 (2 3 5 7))\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:374
msgid "Note that the above result is a list of mixed elements: numbers, symbols (here @code{a}) and the last element is a list itself."
msgstr "Обратите внимание, что приведенный выше результат - это смешанный список  элементов: чисел, символов (здесь @code{a}), а последний элемент сам по себе список."

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:376
#, no-wrap
msgid "G-expressions, syntax"
msgstr "G-выражения, синтаксис"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:377
#, no-wrap
msgid "gexps, syntax"
msgstr ""

#. type: findex
#: guix-git/doc/guix-cookbook.texi:378
#, no-wrap
msgid "#~"
msgstr ""

#. type: findex
#: guix-git/doc/guix-cookbook.texi:379
#, no-wrap
msgid "#$"
msgstr ""

#. type: findex
#: guix-git/doc/guix-cookbook.texi:380
#, no-wrap
msgid "gexp"
msgstr ""

#. type: findex
#: guix-git/doc/guix-cookbook.texi:381
#, no-wrap
msgid "ungexp"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:387
msgid "Guix defines a variant of S-expressions on steroids called @dfn{G-expressions} or ``gexps'', which come with a variant of @code{quasiquote} and @code{unquote}: @code{#~} (or @code{gexp}) and @code{#$} (or @code{ungexp}).  They let you @emph{stage code for later execution}."
msgstr "Guix определяет вариант S-выражений \"на стероидах\" под названием @dfn{G-expressions} или ``gexps'', которые приходят с вариантом @code{quasiquote} и @code{unquote}: @code{#~} (или @code{gexp}) и @code{#$} (или @code{ungexp}). Они позволяют вам @emph{stage code for later execution}."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:391
msgid "For example, you'll encounter gexps in some package definitions where they provide code to be executed during the package build process.  They look like this:"
msgstr "Например, вы столкнетесь с gexps в некоторых определениях пакетов, где они предоставляют код для выполнения во время процесса сборки пакетов. Они выглядят следующим образом:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:395
#, no-wrap
msgid ""
"(use-modules (guix gexp)           ;so we can write gexps\n"
"             (gnu packages base))  ;for 'coreutils'\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:401
#, no-wrap
msgid ""
";; Below is a G-expression representing staged code.\n"
"#~(begin\n"
"    ;; Invoke 'ls' from the package defined by the 'coreutils'\n"
"    ;; variable.\n"
"    (system* #$(file-append coreutils \"/bin/ls\") \"-l\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:404
#, no-wrap
msgid ""
"    ;; Create this package's output directory.\n"
"    (mkdir #$output))\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:408
msgid "@xref{G-Expressions,,, guix, GNU Guix Reference Manual}, for more on gexps."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:412
msgid "Multiple variables can be named locally with @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}):"
msgstr "Множественные переменные могут быть названы локально с помощью @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}):"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:419
#, no-wrap
msgid ""
"(define x 10)\n"
"(let ((x 2)\n"
"      (y 3))\n"
"  (list x y))\n"
"@result{} (2 3)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:422
#, no-wrap
msgid ""
"x\n"
"@result{} 10\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:425
#, no-wrap
msgid ""
"y\n"
"@error{} In procedure module-lookup: Unbound variable: y\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:429
msgid "Use @code{let*} to allow later variable declarations to refer to earlier definitions."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:435
#, no-wrap
msgid ""
"(let* ((x 2)\n"
"       (y (* x 3)))\n"
"  (list x y))\n"
"@result{} (2 6)\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:442
msgid "@dfn{Keywords} are typically used to identify the named parameters of a procedure.  They are prefixed by @code{#:} (hash, colon) followed by alphanumeric characters: @code{#:like-this}.  @xref{Keywords,,, guile, GNU Guile Reference Manual}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:447
msgid "The percentage @code{%} is typically used for read-only global variables in the build stage.  Note that it is merely a convention, like @code{_} in C.  Scheme treats @code{%} exactly the same as any other letter."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:451
msgid "Modules are created with @code{define-module} (@pxref{Creating Guile Modules,,, guile, GNU Guile Reference Manual}).  For instance"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:457
#, no-wrap
msgid ""
"(define-module (guix build-system ruby)\n"
"  #:use-module (guix store)\n"
"  #:export (ruby-build\n"
"            ruby-build-system))\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:463
msgid "defines the module @code{guix build-system ruby} which must be located in @file{guix/build-system/ruby.scm} somewhere in the Guile load path.  It depends on the @code{(guix store)} module and it exports two variables, @code{ruby-build} and @code{ruby-build-system}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:466
msgid "@xref{Package Modules,,, guix, GNU Guix Reference Manual}, for info on modules that define packages."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:468
#, no-wrap
msgid "Going further"
msgstr "Больше информации"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:472
msgid "Scheme is a language that has been widely used to teach programming and you'll find plenty of material using it as a vehicle.  Here's a selection of documents to learn more about Scheme:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:477
msgid "@uref{https://spritely.institute/static/papers/scheme-primer.html, @i{A Scheme Primer}}, by Christine Lemmer-Webber and the Spritely Institute."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:481
msgid "@uref{http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm, @i{Scheme at a Glance}}, by Steve Litt."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:488
msgid "@uref{https://sarabander.github.io/sicp/, @i{Structure and Interpretation of Computer Programs}}, by Harold Abelson and Gerald Jay Sussman, with Julie Sussman.  Colloquially known as ``SICP'', this book is a reference."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:490
msgid "You can also install it and read it from your computer:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:494
#, no-wrap
msgid ""
"guix install sicp info-reader\n"
"info sicp\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:500
msgid "You'll find more books, tutorials and other resources at @url{https://schemers.org/}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:507
#, no-wrap
msgid "packaging"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:513
msgid "This chapter is dedicated to teaching you how to add packages to the collection of packages that come with GNU Guix.  This involves writing package definitions in Guile Scheme, organizing them in package modules, and building them."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:527
msgid "GNU Guix stands out as the @emph{hackable} package manager, mostly because it uses @uref{https://www.gnu.org/software/guile/, GNU Guile}, a powerful high-level programming language, one of the @uref{https://en.wikipedia.org/wiki/Scheme_%28programming_language%29, Scheme} dialects from the @uref{https://en.wikipedia.org/wiki/Lisp_%28programming_language%29, Lisp family}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:531
msgid "Package definitions are also written in Scheme, which empowers Guix in some very unique ways, unlike most other package managers that use shell scripts or simple languages."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:536
msgid "Use functions, structures, macros and all of Scheme expressiveness for your package definitions."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:540
msgid "Inheritance makes it easy to customize a package by inheriting from it and modifying only what is needed."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:550
msgid "Batch processing: the whole package collection can be parsed, filtered and processed.  Building a headless server with all graphical interfaces stripped out? It's possible.  Want to rebuild everything from source using specific compiler optimization flags? Pass the @code{#:make-flags \"...\"} argument to the list of packages.  It wouldn't be a stretch to think @uref{https://wiki.gentoo.org/wiki/USE_flag, Gentoo USE flags} here, but this goes even further: the changes don't have to be thought out beforehand by the packager, they can be @emph{programmed} by the user!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:556
msgid "The following tutorial covers all the basics around package creation with Guix.  It does not assume much knowledge of the Guix system nor of the Lisp language.  The reader is only expected to be familiar with the command line and to have some basic programming knowledge."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:574
msgid "The ``Defining Packages'' section of the manual introduces the basics of Guix packaging (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}).  In the following section, we will partly go over those basics again."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:580
msgid "GNU@tie{}Hello is a dummy project that serves as an idiomatic example for packaging.  It uses the GNU build system (@code{./configure && make && make install}).  Guix already provides a package definition which is a perfect example to start with.  You can look up its declaration with @code{guix edit hello} from the command line.  Let's see how it looks:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:601
#, no-wrap
msgid ""
"(define-public hello\n"
"  (package\n"
"    (name \"hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, GNU world: An example GNU package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:605
msgid "As you can see, most of it is rather straightforward.  But let's review the fields together:"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:607
#, no-wrap
msgid "name"
msgstr "name"

#. type: table
#: guix-git/doc/guix-cookbook.texi:610
msgid "The project name.  Using Scheme conventions, we prefer to keep it lower case, without underscore and using dash-separated words."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:611
#, no-wrap
msgid "source"
msgstr "source"

#. type: table
#: guix-git/doc/guix-cookbook.texi:614
msgid "This field contains a description of the source code origin.  The @code{origin} record contains these fields:"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:616
#, no-wrap
msgid "The method, here @code{url-fetch} to download via HTTP/FTP, but other methods"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:618
msgid "exist, such as @code{git-fetch} for Git repositories."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:618
#, no-wrap
msgid "The URI, which is typically some @code{https://} location for @code{url-fetch}.  Here"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:621
msgid "the special `mirror://gnu` refers to a set of well known locations, all of which can be used by Guix to fetch the source, should some of them fail."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:621
#, no-wrap
msgid "The @code{sha256} checksum of the requested file.  This is essential to ensure"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:624
msgid "the source is not corrupted.  Note that Guix works with base32 strings, hence the call to the @code{base32} function."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:626
#, no-wrap
msgid "build-system"
msgstr "build-system"

#. type: table
#: guix-git/doc/guix-cookbook.texi:635
msgid "This is where the power of abstraction provided by the Scheme language really shines: in this case, the @code{gnu-build-system} abstracts away the famous @code{./configure && make && make install} shell invocations.  Other build systems include the @code{trivial-build-system} which does not do anything and requires from the packager to program all the build steps, the @code{python-build-system}, the @code{emacs-build-system}, and many more (@pxref{Build Systems,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:636
#, no-wrap
msgid "synopsis"
msgstr "synopsis"

#. type: table
#: guix-git/doc/guix-cookbook.texi:639
msgid "It should be a concise summary of what the package does.  For many packages a tagline from the project's home page can be used as the synopsis."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:640
#, no-wrap
msgid "description"
msgstr "description"

#. type: table
#: guix-git/doc/guix-cookbook.texi:643
msgid "Same as for the synopsis, it's fine to re-use the project description from the homepage.  Note that Guix uses Texinfo syntax."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:644
#, no-wrap
msgid "home-page"
msgstr "home-page"

#. type: table
#: guix-git/doc/guix-cookbook.texi:646
msgid "Use HTTPS if available."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:647
#, no-wrap
msgid "license"
msgstr "license"

#. type: table
#: guix-git/doc/guix-cookbook.texi:650
msgid "See @code{guix/licenses.scm} in the project source for a full list of available licenses."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:654
msgid "Time to build our first package! Nothing fancy here for now: we will stick to a dummy @code{my-hello}, a copy of the above declaration."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:658
msgid "As with the ritualistic ``Hello World'' taught with most programming languages, this will possibly be the most ``manual'' approach.  We will work out an ideal setup later; for now we will go the simplest route."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:660
msgid "Save the following to a file @file{my-hello.scm}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:666
#, no-wrap
msgid ""
"(use-modules (guix packages)\n"
"             (guix download)\n"
"             (guix build-system gnu)\n"
"             (guix licenses))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:685
#, no-wrap
msgid ""
"(package\n"
"  (name \"my-hello\")\n"
"  (version \"2.10\")\n"
"  (source (origin\n"
"            (method url-fetch)\n"
"            (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                \".tar.gz\"))\n"
"            (sha256\n"
"             (base32\n"
"              \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"  (build-system gnu-build-system)\n"
"  (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"  (description\n"
"   \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"  (home-page \"https://www.gnu.org/software/hello/\")\n"
"  (license gpl3+))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:688
msgid "We will explain the extra code in a moment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:695
msgid "Feel free to play with the different values of the various fields.  If you change the source, you'll need to update the checksum.  Indeed, Guix refuses to build anything if the given checksum does not match the computed checksum of the source code.  To obtain the correct checksum of the package declaration, we need to download the source, compute the sha256 checksum and convert it to base32."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:698
msgid "Thankfully, Guix can automate this task for us; all we need is to provide the URI:"
msgstr ""

#.  This is example shell output.
#. type: example
#: guix-git/doc/guix-cookbook.texi:702
#, no-wrap
msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:709
#, no-wrap
msgid ""
"Starting download of /tmp/guix-file.JLYgL7\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz...\n"
"following redirection to `https://mirror.ibcp.fr/pub/gnu/hello/hello-2.10.tar.gz'...\n"
" …10.tar.gz  709KiB                                 2.5MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:714
msgid "In this specific case the output tells us which mirror was chosen.  If the result of the above command is not the same as in the above snippet, update your @code{my-hello} declaration accordingly."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:718
msgid "Note that GNU package tarballs come with an OpenPGP signature, so you should definitely check the signature of this tarball with `gpg` to authenticate it before going further:"
msgstr ""

#.  This is example shell output.
#. type: example
#: guix-git/doc/guix-cookbook.texi:722
#, no-wrap
msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz.sig\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:737
#, no-wrap
msgid ""
"Starting download of /tmp/guix-file.03tFfb\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz.sig...\n"
"following redirection to `https://ftp.igh.cnrs.fr/pub/gnu/hello/hello-2.10.tar.gz.sig'...\n"
" ….tar.gz.sig  819B                                                                                                                       1.2MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig\n"
"0q0v86n3y38z17rl146gdakw9xc4mcscpk8dscs412j22glrv9jf\n"
"$ gpg --verify /gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig /gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"gpg: Signature made Sun 16 Nov 2014 01:08:37 PM CET\n"
"gpg:                using RSA key A9553245FDE9B739\n"
"gpg: Good signature from \"Sami Kerola <kerolasa@@iki.fi>\" [unknown]\n"
"gpg:                 aka \"Sami Kerola (http://www.iki.fi/kerolasa/) <kerolasa@@iki.fi>\" [unknown]\n"
"gpg: WARNING: This key is not certified with a trusted signature!\n"
"gpg:          There is no indication that the signature belongs to the owner.\n"
"Primary key fingerprint: 8ED3 96E3 7E38 D471 A005  30D3 A955 3245 FDE9 B739\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:740
msgid "You can then happily run"
msgstr ""

#.  Do not translate this command
#. type: example
#: guix-git/doc/guix-cookbook.texi:744
#, no-wrap
msgid "$ guix package --install-from-file=my-hello.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:747
msgid "You should now have @code{my-hello} in your profile!"
msgstr ""

#.  Do not translate this command
#. type: example
#: guix-git/doc/guix-cookbook.texi:753
#, no-wrap
msgid ""
"$ guix package --list-installed=my-hello\n"
"my-hello\t2.10\tout\n"
"/gnu/store/f1db2mfm8syb8qvc357c53slbvf1g9m9-my-hello-2.10\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:758
msgid "We've gone as far as we could without any knowledge of Scheme.  Before moving on to more complex packages, now is the right time to brush up on your Scheme knowledge.  @xref{A Scheme Crash Course} to get up to speed."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:765
msgid "In the rest of this chapter we will rely on some basic Scheme programming knowledge.  Now let's detail the different possible setups for working on Guix packages."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:767
msgid "There are several ways to set up a Guix packaging environment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:770
msgid "We recommend you work directly on the Guix source checkout since it makes it easier for everyone to contribute to the project."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:772
msgid "But first, let's look at other possibilities."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:785
msgid "This is what we previously did with @samp{my-hello}.  With the Scheme basics we've covered, we are now able to explain the leading chunks.  As stated in @code{guix package --help}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:790
#, no-wrap
msgid ""
"  -f, --install-from-file=FILE\n"
"                         install the package that the code within FILE\n"
"                         evaluates to\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:794
msgid "Thus the last expression @emph{must} return a package, which is the case in our earlier example."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:798
msgid "The @code{use-modules} expression tells which of the modules we need in the file.  Modules are a collection of values and procedures.  They are commonly called ``libraries'' or ``packages'' in other programming languages."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:802
#, no-wrap
msgid "channel"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:808
msgid "Guix and its package collection can be extended through @dfn{channels}.  A channel is a Git repository, public or not, containing @file{.scm} files that provide packages (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}) or services (@pxref{Defining Services,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:811
msgid "How would you go about creating a channel? First, create a directory that will contain your @file{.scm} files, say @file{~/my-channel}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:814
#, no-wrap
msgid "mkdir ~/my-channel\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:818
msgid "Suppose you want to add the @samp{my-hello} package we saw previously; it first needs some adjustments:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:825
#, no-wrap
msgid ""
"(define-module (my-hello)\n"
"  #:use-module (guix licenses)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix build-system gnu)\n"
"  #:use-module (guix download))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:845
#, no-wrap
msgid ""
"(define-public my-hello\n"
"  (package\n"
"    (name \"my-hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:851
msgid "Note that we have assigned the package value to an exported variable name with @code{define-public}.  This is effectively assigning the package to the @code{my-hello} variable so that it can be referenced, among other as dependency of other packages."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:856
msgid "If you use @code{guix package --install-from-file=my-hello.scm} on the above file, it will fail because the last expression, @code{define-public}, does not return a package.  If you want to use @code{define-public} in this use-case nonetheless, make sure the file ends with an evaluation of @code{my-hello}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:862
#, no-wrap
msgid ""
";; ...\n"
"(define-public my-hello\n"
"  ;; ...\n"
"  )\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:864
#, no-wrap
msgid "my-hello\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:867
msgid "This last example is not very typical."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:871
msgid "Now how do you make that package visible to @command{guix} commands so you can test your packages? You need to add the directory to the search path using the @option{-L} command-line option, as in these examples:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:875
#, no-wrap
msgid ""
"guix show -L ~/my-channel my-hello\n"
"guix build -L ~/my-channel my-hello\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:881
msgid "The final step is to turn @file{~/my-channel} into an actual channel, making your package collection seamlessly available @i{via} any @command{guix} command.  To do that, you first need to make it a Git repository:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:887
#, no-wrap
msgid ""
"cd ~/my-channel\n"
"git init\n"
"git add my-hello.scm\n"
"git commit -m \"First commit of my channel.\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:895
msgid "And that's it, you have a channel! From there on, you can add this channel to your channel configuration in @file{~/.config/guix/channels.scm} (@pxref{Specifying Additional Channels,,, guix, GNU Guix Reference Manual}); assuming you keep your channel local for now, the @file{channels.scm} would look something like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:902
#, no-wrap
msgid ""
"(append (list (channel\n"
"                (name 'my-channel)\n"
"                (url (string-append \"file://\" (getenv \"HOME\")\n"
"                                    \"/my-channel\"))))\n"
"        %default-channels)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:909
msgid "Next time you run @command{guix pull}, your channel will be picked up and the packages it defines will be readily available to all the @command{guix} commands, even if you do not pass @option{-L}.  The @command{guix describe} command will show that Guix is, indeed, using both the @code{my-channel} and the @code{guix} channels."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:912
msgid "@xref{Creating a Channel,,, guix, GNU Guix Reference Manual}, for details."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:919
msgid "Working directly on the Guix project is recommended: it reduces the friction when the time comes to submit your changes upstream to let the community benefit from your hard work!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:925
msgid "Unlike most software distributions, the Guix repository holds in one place both the tooling (including the package manager) and the package definitions.  This choice was made so that it would give developers the flexibility to modify the API without breakage by updating all packages at the same time.  This reduces development inertia."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:927
msgid "Check out the official @uref{https://git-scm.com/, Git} repository:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:930
#, no-wrap
msgid "$ git clone https://git.savannah.gnu.org/git/guix.git\n"
msgstr "$ git clone https://git.savannah.gnu.org/git/guix.git\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:934
msgid "In the rest of this article, we use @samp{$GUIX_CHECKOUT} to refer to the location of the checkout."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:938
msgid "Follow the instructions in the manual (@pxref{Contributing,,, guix, GNU Guix Reference Manual}) to set up the repository environment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:941
msgid "Once ready, you should be able to use the package definitions from the repository environment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:943
msgid "Feel free to edit package definitions found in @samp{$GUIX_CHECKOUT/gnu/packages}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:947
msgid "The @samp{$GUIX_CHECKOUT/pre-inst-env} script lets you use @samp{guix} over the package collection of the repository (@pxref{Running Guix Before It Is Installed,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:951
msgid "Search packages, such as Ruby:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:958
#, no-wrap
msgid ""
"  $ cd $GUIX_CHECKOUT\n"
"  $ ./pre-inst-env guix package --list-available=ruby\n"
"      ruby    1.8.7-p374      out     gnu/packages/ruby.scm:119:2\n"
"      ruby    2.1.6   out     gnu/packages/ruby.scm:91:2\n"
"      ruby    2.2.2   out     gnu/packages/ruby.scm:39:2\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:962
msgid "Build a package, here Ruby version 2.1:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:966
#, no-wrap
msgid ""
"  $ ./pre-inst-env guix build --keep-failed ruby@@2.1\n"
"  /gnu/store/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:970
msgid "Install it to your user profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:973
#, no-wrap
msgid "  $ ./pre-inst-env guix package --install ruby@@2.1\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:977
msgid "Check for common mistakes:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:980
#, no-wrap
msgid "  $ ./pre-inst-env guix lint ruby@@2.1\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:985
msgid "Guix strives at maintaining a high packaging standard; when contributing to the Guix project, remember to"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:989
msgid "follow the coding style (@pxref{Coding Style,,, guix, GNU Guix Reference Manual}),"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:991
msgid "and review the check list from the manual (@pxref{Submitting Patches,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:995
msgid "Once you are happy with the result, you are welcome to send your contribution to make it part of Guix.  This process is also detailed in the manual.  (@pxref{Contributing,,, guix, GNU Guix Reference Manual})"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:998
msgid "It's a community effort so the more join in, the better Guix becomes!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1005
msgid "The above ``Hello World'' example is as simple as it goes.  Packages can be more complex than that and Guix can handle more advanced scenarios.  Let's look at another, more sophisticated package (slightly modified from the source):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1019
#, no-wrap
msgid ""
"(define-module (gnu packages version-control)\n"
"  #:use-module ((guix licenses) #:prefix license:)\n"
"  #:use-module (guix utils)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix git-download)\n"
"  #:use-module (guix build-system cmake)\n"
"  #:use-module (gnu packages compression)\n"
"  #:use-module (gnu packages pkg-config)\n"
"  #:use-module (gnu packages python)\n"
"  #:use-module (gnu packages ssh)\n"
"  #:use-module (gnu packages tls)\n"
"  #:use-module (gnu packages web))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1075
#, no-wrap
msgid ""
"(define-public my-libgit2\n"
"  (let ((commit \"e98d0a37c93574d2c6107bf7f31140b548c6a7bf\")\n"
"        (revision \"1\"))\n"
"    (package\n"
"      (name \"my-libgit2\")\n"
"      (version (git-version \"0.26.6\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"https://github.com/libgit2/libgit2/\")\n"
"                      (commit commit)))\n"
"                (file-name (git-file-name name version))\n"
"                (sha256\n"
"                 (base32\n"
"                  \"17pjvprmdrx4h6bb1hhc98w9qi6ki7yl57f090n9kbhswxqfs7s3\"))\n"
"                (patches (search-patches \"libgit2-mtime-0.patch\"))\n"
"                (modules '((guix build utils)))\n"
"                ;; Remove bundled software.\n"
"                (snippet '(delete-file-recursively \"deps\"))))\n"
"      (build-system cmake-build-system)\n"
"      (outputs '(\"out\" \"debug\"))\n"
"      (arguments\n"
"       `(#:tests? #true                         ; Run the test suite (this is the default)\n"
"         #:configure-flags '(\"-DUSE_SHA1DC=ON\") ; SHA-1 collision detection\n"
"         #:phases\n"
"         (modify-phases %standard-phases\n"
"           (add-after 'unpack 'fix-hardcoded-paths\n"
"             (lambda _\n"
"               (substitute* \"tests/repo/init.c\"\n"
"                 ((\"#!/bin/sh\") (string-append \"#!\" (which \"sh\"))))\n"
"               (substitute* \"tests/clar/fs.h\"\n"
"                 ((\"/bin/cp\") (which \"cp\"))\n"
"                 ((\"/bin/rm\") (which \"rm\")))))\n"
"           ;; Run checks more verbosely.\n"
"           (replace 'check\n"
"             (lambda* (#:key tests? #:allow-other-keys)\n"
"               (when tests?\n"
"                 (invoke \"./libgit2_clar\" \"-v\" \"-Q\"))))\n"
"           (add-after 'unpack 'make-files-writable-for-tests\n"
"             (lambda _ (for-each make-file-writable (find-files \".\")))))))\n"
"      (inputs\n"
"       (list libssh2 http-parser python-wrapper))\n"
"      (native-inputs\n"
"       (list pkg-config))\n"
"      (propagated-inputs\n"
"       ;; These two libraries are in 'Requires.private' in libgit2.pc.\n"
"       (list openssl zlib))\n"
"      (home-page \"https://libgit2.github.com/\")\n"
"      (synopsis \"Library providing Git core methods\")\n"
"      (description\n"
"       \"Libgit2 is a portable, pure C implementation of the Git core methods\n"
"provided as a re-entrant linkable library with a solid API, allowing you to\n"
"write native speed custom Git applications in any language with bindings.\")\n"
"      ;; GPLv2 with linking exception\n"
"      (license license:gpl2))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1080
msgid "(In those cases were you only want to tweak a few fields from a package definition, you should rely on inheritance instead of copy-pasting everything.  See below.)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1082
msgid "Let's discuss those fields in depth."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1083
#, no-wrap
msgid "@code{git-fetch} method"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1090
msgid "Unlike the @code{url-fetch} method, @code{git-fetch} expects a @code{git-reference} which takes a Git repository and a commit.  The commit can be any Git reference such as tags, so if the @code{version} is tagged, then it can be used directly.  Sometimes the tag is prefixed with a @code{v}, in which case you'd use @code{(commit (string-append \"v\" version))}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1094
msgid "To ensure that the source code from the Git repository is stored in a directory with a descriptive name, we use @code{(file-name (git-file-name name version))}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1099
msgid "The @code{git-version} procedure can be used to derive the version when packaging programs for a specific commit, following the Guix contributor guidelines (@pxref{Version Numbers,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1103
msgid "How does one obtain the @code{sha256} hash that's in there, you ask? By invoking @command{guix hash} on a checkout of the desired commit, along these lines:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1109
#, no-wrap
msgid ""
"git clone https://github.com/libgit2/libgit2/\n"
"cd libgit2\n"
"git checkout v0.26.6\n"
"guix hash -rx .\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1114
msgid "@command{guix hash -rx} computes a SHA256 hash over the whole directory, excluding the @file{.git} sub-directory (@pxref{Invoking guix hash,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1117
msgid "In the future, @command{guix download} will hopefully be able to do these steps for you, just like it does for regular downloads."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1118
#, no-wrap
msgid "Snippets"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1124
msgid "Snippets are quoted (i.e. non-evaluated) Scheme code that are a means of patching the source.  They are a Guix-y alternative to the traditional @file{.patch} files.  Because of the quote, the code in only evaluated when passed to the Guix daemon for building.  There can be as many snippets as needed."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1127
msgid "Snippets might need additional Guile modules which can be imported from the @code{modules} field."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1128
#, no-wrap
msgid "Inputs"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1131
msgid "There are 3 different input types.  In short:"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1133
#, no-wrap
msgid "native-inputs"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1136
msgid "Required for building but not runtime -- installing a package through a substitute won't install these inputs."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1136
#, no-wrap
msgid "inputs"
msgstr "inputs"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1139
msgid "Installed in the store but not in the profile, as well as being present at build time."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1139
#, no-wrap
msgid "propagated-inputs"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1142
msgid "Installed in the store and in the profile, as well as being present at build time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1145
msgid "@xref{package Reference,,, guix, GNU Guix Reference Manual} for more details."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1149
msgid "The distinction between the various inputs is important: if a dependency can be handled as an @emph{input} instead of a @emph{propagated input}, it should be done so, or else it ``pollutes'' the user profile for no good reason."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1156
msgid "For instance, a user installing a graphical program that depends on a command line tool might only be interested in the graphical part, so there is no need to force the command line tool into the user profile.  The dependency is a concern to the package, not to the user.  @emph{Inputs} make it possible to handle dependencies without bugging the user by adding undesired executable files (or libraries) to their profile."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1162
msgid "Same goes for @emph{native-inputs}: once the program is installed, build-time dependencies can be safely garbage-collected.  It also matters when a substitute is available, in which case only the @emph{inputs} and @emph{propagated inputs} will be fetched: the @emph{native inputs} are not required to install a package from a substitute."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:1163 guix-git/doc/guix-cookbook.texi:2335
#: guix-git/doc/guix-cookbook.texi:4000 guix-git/doc/guix-cookbook.texi:5173
#: guix-git/doc/guix-cookbook.texi:5239
#, no-wrap
msgid "Note"
msgstr "Примечание"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:1166
msgid "You may see here and there snippets where package inputs are written quite differently, like so:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1173
#, no-wrap
msgid ""
";; The \"old style\" for inputs.\n"
"(inputs\n"
" `((\"libssh2\" ,libssh2)\n"
"   (\"http-parser\" ,http-parser)\n"
"   (\"python\" ,python-wrapper)))\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:1179
msgid "This is the ``old style'', where each input in the list is explicitly given a label (a string).  It is still supported but we recommend using the style above instead.  @xref{package Reference,,, guix, GNU Guix Reference Manual}, for more info."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1181
#, no-wrap
msgid "Outputs"
msgstr "Результаты"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1185
msgid "Just like how a package can have multiple inputs, it can also produce multiple outputs."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1187
msgid "Each output corresponds to a separate directory in the store."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1190
msgid "The user can choose which output to install; this is useful to save space or to avoid polluting the user profile with unwanted executables or libraries."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1193
msgid "Output separation is optional.  When the @code{outputs} field is left out, the default and only output (the complete package) is referred to as @code{\"out\"}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1195
msgid "Typical separate output names include @code{debug} and @code{doc}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1199
msgid "It's advised to separate outputs only when you've shown it's worth it: if the output size is significant (compare with @code{guix size}) or in case the package is modular."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1200
#, no-wrap
msgid "Build system arguments"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1203
msgid "The @code{arguments} is a keyword-value list used to configure the build process."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1208
msgid "The simplest argument @code{#:tests?} can be used to disable the test suite when building the package.  This is mostly useful when the package does not feature any test suite.  It's strongly recommended to keep the test suite on if there is one."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1212
msgid "Another common argument is @code{:make-flags}, which specifies a list of flags to append when running make, as you would from the command line.  For instance, the following flags"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1216
#, no-wrap
msgid ""
"#:make-flags (list (string-append \"prefix=\" (assoc-ref %outputs \"out\"))\n"
"                   \"CC=gcc\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1219
msgid "translate into"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1222
#, no-wrap
msgid "$ make CC=gcc prefix=/gnu/store/...-<out>\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1228
msgid "This sets the C compiler to @code{gcc} and the @code{prefix} variable (the installation directory in Make parlance) to @code{(assoc-ref %outputs \"out\")}, which is a build-stage global variable pointing to the destination directory in the store (something like @file{/gnu/store/...-my-libgit2-20180408})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1230
msgid "Similarly, it's possible to set the configure flags:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1233
#, no-wrap
msgid "#:configure-flags '(\"-DUSE_SHA1DC=ON\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1237
msgid "The @code{%build-inputs} variable is also generated in scope.  It's an association table that maps the input names to their store directories."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1242
msgid "The @code{phases} keyword lists the sequential steps of the build system.  Typically phases include @code{unpack}, @code{configure}, @code{build}, @code{install} and @code{check}.  To know more about those phases, you need to work out the appropriate build system definition in @samp{$GUIX_CHECKOUT/guix/build/gnu-build-system.scm}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1262
#, no-wrap
msgid ""
"(define %standard-phases\n"
"  ;; Standard build phases, as a list of symbol/procedure pairs.\n"
"  (let-syntax ((phases (syntax-rules ()\n"
"                         ((_ p ...) `((p . ,p) ...)))))\n"
"    (phases set-SOURCE-DATE-EPOCH set-paths install-locale unpack\n"
"            bootstrap\n"
"            patch-usr-bin-file\n"
"            patch-source-shebangs configure patch-generated-file-shebangs\n"
"            build check install\n"
"            patch-shebangs strip\n"
"            validate-runpath\n"
"            validate-documentation-location\n"
"            delete-info-dir-file\n"
"            patch-dot-desktop-files\n"
"            make-dynamic-linker-cache\n"
"            install-license-files\n"
"            reset-gzip-timestamps\n"
"            compress-documentation)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1265
msgid "Or from the REPL:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1271
#, no-wrap
msgid ""
"(add-to-load-path \"/path/to/guix/checkout\")\n"
",use (guix build gnu-build-system)\n"
"(map car %standard-phases)\n"
"@result{} (set-SOURCE-DATE-EPOCH set-paths install-locale unpack bootstrap patch-usr-bin-file patch-source-shebangs configure patch-generated-file-shebangs build check install patch-shebangs strip validate-runpath validate-documentation-location delete-info-dir-file patch-dot-desktop-files make-dynamic-linker-cache install-license-files reset-gzip-timestamps compress-documentation)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1275
msgid "If you want to know more about what happens during those phases, consult the associated procedures."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1278
msgid "For instance, as of this writing the definition of @code{unpack} for the GNU build system is:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1288
#, no-wrap
msgid ""
"(define* (unpack #:key source #:allow-other-keys)\n"
"  \"Unpack SOURCE in the working directory, and change directory within the\n"
"source.  When SOURCE is a directory, copy it in a sub-directory of the current\n"
"working directory.\"\n"
"  (if (file-is-directory? source)\n"
"      (begin\n"
"        (mkdir \"source\")\n"
"        (chdir \"source\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1311
#, no-wrap
msgid ""
"        ;; Preserve timestamps (set to the Epoch) on the copied tree so that\n"
"        ;; things work deterministically.\n"
"        (copy-recursively source \".\"\n"
"                          #:keep-mtime? #t)\n"
"        ;; Make the source checkout files writable, for convenience.\n"
"        (for-each (lambda (f)\n"
"                    (false-if-exception (make-file-writable f)))\n"
"                  (find-files \".\")))\n"
"      (begin\n"
"        (cond\n"
"         ((string-suffix? \".zip\" source)\n"
"          (invoke \"unzip\" source))\n"
"         ((tarball? source)\n"
"          (invoke \"tar\" \"xvf\" source))\n"
"         (else\n"
"          (let ((name (strip-store-file-name source))\n"
"                (command (compressor source)))\n"
"            (copy-file source name)\n"
"            (when command\n"
"              (invoke command \"--decompress\" name)))))\n"
"        ;; Attempt to change into child directory.\n"
"        (and=> (first-subdirectory \".\") chdir))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1319
msgid "Note the @code{chdir} call: it changes the working directory to where the source was unpacked.  Thus every phase following the @code{unpack} will use the source as a working directory, which is why we can directly work on the source files.  That is to say, unless a later phase changes the working directory to something else."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1323
msgid "We modify the list of @code{%standard-phases} of the build system with the @code{modify-phases} macro as per the list of specified modifications, which may have the following forms:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1327
msgid "@code{(add-before @var{phase} @var{new-phase} @var{procedure})}: Run @var{procedure} named @var{new-phase} before @var{phase}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1329
msgid "@code{(add-after @var{phase} @var{new-phase} @var{procedure})}: Same, but afterwards."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1331
msgid "@code{(replace @var{phase} @var{procedure})}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1333
msgid "@code{(delete @var{phase})}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1340
msgid "The @var{procedure} supports the keyword arguments @code{inputs} and @code{outputs}.  Each input (whether @emph{native}, @emph{propagated} or not) and output directory is referenced by their name in those variables.  Thus @code{(assoc-ref outputs \"out\")} is the store directory of the main output of the package.  A phase procedure may look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1347
#, no-wrap
msgid ""
"(lambda* (#:key inputs outputs #:allow-other-keys)\n"
"  (let ((bash-directory (assoc-ref inputs \"bash\"))\n"
"        (output-directory (assoc-ref outputs \"out\"))\n"
"        (doc-directory (assoc-ref outputs \"doc\")))\n"
"    ;; ... ))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1350
msgid "Its return value is ignored."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1351
#, no-wrap
msgid "Code staging"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1357
msgid "The astute reader may have noticed the quasi-quote and comma syntax in the argument field.  Indeed, the build code in the package declaration should not be evaluated on the client side, but only when passed to the Guix daemon.  This mechanism of passing code around two running processes is called @uref{https://arxiv.org/abs/1709.00833, code staging}."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1358
#, no-wrap
msgid "Utility functions"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1363
msgid "When customizing @code{phases}, we often need to write code that mimics the equivalent system invocations (@code{make}, @code{mkdir}, @code{cp}, etc.)@: commonly used during regular ``Unix-style'' installations."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1366
msgid "Some like @code{chmod} are native to Guile.  @xref{,,, guile, Guile reference manual} for a complete list."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1369
msgid "Guix provides additional helper functions which prove especially handy in the context of package management."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1373
msgid "Some of those functions can be found in @samp{$GUIX_CHECKOUT/guix/guix/build/utils.scm}.  Most of them mirror the behaviour of the traditional Unix system commands:"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1375
#, no-wrap
msgid "which"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1377
msgid "Like the @samp{which} system command."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1377
#, no-wrap
msgid "find-files"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1379
msgid "Akin to the @samp{find} system command."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1379
#, no-wrap
msgid "mkdir-p"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1381
msgid "Like @samp{mkdir -p}, which creates all parents as needed."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1381
#, no-wrap
msgid "install-file"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1385
msgid "Similar to @samp{install} when installing a file to a (possibly non-existing) directory.  Guile has @code{copy-file} which works like @samp{cp}."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1385
#, no-wrap
msgid "copy-recursively"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1387
msgid "Like @samp{cp -r}."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1387
#, no-wrap
msgid "delete-file-recursively"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1389
msgid "Like @samp{rm -rf}."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1389
#, no-wrap
msgid "invoke"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1391
msgid "Run an executable.  This should be used instead of @code{system*}."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1391
#, no-wrap
msgid "with-directory-excursion"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1394
msgid "Run the body in a different working directory, then restore the previous working directory."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1394
#, no-wrap
msgid "substitute*"
msgstr "substitute*"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1396
msgid "A ``@command{sed}-like'' function."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1400
msgid "@xref{Build Utilities,,, guix, GNU Guix Reference Manual}, for more information on these utilities."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1401
#, no-wrap
msgid "Module prefix"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1411
msgid "The license in our last example needs a prefix: this is because of how the @code{license} module was imported in the package, as @code{#:use-module ((guix licenses)  #:prefix license:)}.  The Guile module import mechanism (@pxref{Using Guile Modules,,, guile, Guile reference manual})  gives the user full control over namespacing: this is needed to avoid clashes between, say, the @samp{zlib} variable from @samp{licenses.scm} (a @emph{license} value) and the @samp{zlib} variable from @samp{compression.scm} (a @emph{package} value)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1420
msgid "What we've seen so far covers the majority of packages using a build system other than the @code{trivial-build-system}.  The latter does not automate anything and leaves you to build everything manually.  This can be more demanding and we won't cover it here for now, but thankfully it is rarely necessary to fall back on this system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1424
msgid "For the other build systems, such as ASDF, Emacs, Perl, Ruby and many more, the process is very similar to the GNU build system except for a few specialized arguments."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1429
msgid "@xref{Build Systems,,, guix, GNU Guix Reference Manual}, for more information on build systems, or check the source code in the @samp{$GUIX_CHECKOUT/guix/build} and @samp{$GUIX_CHECKOUT/guix/build-system} directories."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1435
msgid "We can't repeat it enough: having a full-fledged programming language at hand empowers us in ways that reach far beyond traditional package management."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1437
msgid "Let's illustrate this with some awesome features of Guix!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1452
msgid "You might find some build systems good enough that there is little to do at all to write a package, to the point that it becomes repetitive and tedious after a while.  A @emph{raison d'être} of computers is to replace human beings at those boring tasks.  So let's tell Guix to do this for us and create the package definition of an R package from CRAN (the output is trimmed for conciseness):"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1455
#, no-wrap
msgid ""
"$ guix import cran --recursive walrus\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1459
#, no-wrap
msgid ""
"(define-public r-mc2d\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1463
#, no-wrap
msgid ""
"(define-public r-jmvcore\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1467
#, no-wrap
msgid ""
"(define-public r-wrs2\n"
"    ; ...\n"
"    (license gpl3)))\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1493
#, no-wrap
msgid ""
"(define-public r-walrus\n"
"  (package\n"
"    (name \"r-walrus\")\n"
"    (version \"1.0.3\")\n"
"    (source\n"
"      (origin\n"
"        (method url-fetch)\n"
"        (uri (cran-uri \"walrus\" version))\n"
"        (sha256\n"
"          (base32\n"
"            \"1nk2glcvy4hyksl5ipq2mz8jy4fss90hx6cq98m3w96kzjni6jjj\"))))\n"
"    (build-system r-build-system)\n"
"    (propagated-inputs\n"
"      (list r-ggplot2 r-jmvcore r-r6 r-wrs2))\n"
"    (home-page \"https://github.com/jamovi/walrus\")\n"
"    (synopsis \"Robust Statistical Methods\")\n"
"    (description\n"
"      \"This package provides a toolbox of common robust statistical\n"
"tests, including robust descriptives, robust t-tests, and robust ANOVA.\n"
"It is also available as a module for 'jamovi' (see\n"
"<https://www.jamovi.org> for more information).  Walrus is based on the\n"
"WRS2 package by Patrick Mair, which is in turn based on the scripts and\n"
"work of Rand Wilcox.  These analyses are described in depth in the book\n"
"'Introduction to Robust Estimation & Hypothesis Testing'.\")\n"
"    (license gpl3)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1497
msgid "The recursive importer won't import packages for which Guix already has package definitions, except for the very first."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1502
msgid "Not all applications can be packaged this way, only those relying on a select number of supported systems.  Read about the full list of importers in the guix import section of the manual (@pxref{Invoking guix import,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1508
msgid "Guix can be smart enough to check for updates on systems it knows.  It can report outdated package definitions with"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1511
#, no-wrap
msgid "$ guix refresh hello\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1516
msgid "In most cases, updating a package to a newer version requires little more than changing the version number and the checksum.  Guix can do that automatically as well:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1519
#, no-wrap
msgid "$ guix refresh hello --update\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1526
msgid "If you've started browsing the existing package definitions, you might have noticed that a significant number of them have a @code{inherit} field:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1541
#, no-wrap
msgid ""
"(define-public adwaita-icon-theme\n"
"  (package (inherit gnome-icon-theme)\n"
"    (name \"adwaita-icon-theme\")\n"
"    (version \"3.26.1\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnome/sources/\" name \"/\"\n"
"                                  (version-major+minor version) \"/\"\n"
"                                  name \"-\" version \".tar.xz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"17fpahgh5dyckgz7rwqvzgnhx53cx9kr2xw0szprc6bnqy977fi8\"))))\n"
"    (native-inputs (list `(,gtk+ \"bin\")))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1546
msgid "All unspecified fields are inherited from the parent package.  This is very convenient to create alternative packages, for instance with different source, version or compilation options."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1554
msgid "Sadly, some applications can be tough to package.  Sometimes they need a patch to work with the non-standard file system hierarchy enforced by the store.  Sometimes the tests won't run properly.  (They can be skipped but this is not recommended.)  Other times the resulting package won't be reproducible."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1557
msgid "Should you be stuck, unable to figure out how to fix any sort of packaging issue, don't hesitate to ask the community for help."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1559
msgid "See the @uref{https://www.gnu.org/software/guix/contact/, Guix homepage} for information on the mailing lists, IRC, etc."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1567
msgid "This tutorial was a showcase of the sophisticated package management that Guix boasts.  At this point we have mostly restricted this introduction to the @code{gnu-build-system} which is a core abstraction layer on which more advanced abstractions are based."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1572
msgid "Where do we go from here? Next we ought to dissect the innards of the build system by removing all abstractions, using the @code{trivial-build-system}: this should give us a thorough understanding of the process before investigating some more advanced packaging techniques and edge cases."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1575
msgid "Other features worth exploring are the interactive editing and debugging capabilities of Guix provided by the Guile REPL@."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1580
msgid "Those fancy features are completely optional and can wait; now is a good time to take a well-deserved break.  With what we've introduced here you should be well armed to package lots of programs.  You can get started right away and hopefully we will see your contributions soon!"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1587
msgid "The @uref{https://www.gnu.org/software/guix/manual/en/html_node/Defining-Packages.html, package reference in the manual}"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1590
msgid "@uref{https://gitlab.com/pjotrp/guix-notes/blob/master/HACKING.org, Pjotr’s hacking guide to GNU Guix}"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1593
msgid "@uref{https://www.gnu.org/software/guix/guix-ghm-andreas-20130823.pdf, ``GNU Guix: Package without a scheme!''}, by Andreas Enge"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1602
msgid "Guix offers a flexible language for declaratively configuring your Guix System.  This flexibility can at times be overwhelming.  The purpose of this chapter is to demonstrate some advanced configuration concepts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1605
msgid "@pxref{System Configuration,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1632
msgid "While the Guix manual explains auto-login one user to @emph{all} TTYs (@pxref{auto-login to TTY,,, guix, GNU Guix Reference Manual}), some might prefer a situation, in which one user is logged into one TTY with the other TTYs either configured to login different users or no one at all.  Note that one can auto-login one user to any TTY, but it is usually advisable to avoid @code{tty1}, which, by default, is used to log warnings and errors."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1634
msgid "Here is how one might set up auto login for one user to one tty:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1642
#, no-wrap
msgid ""
"(define (auto-login-to-tty config tty user)\n"
"  (if (string=? tty (mingetty-configuration-tty config))\n"
"        (mingetty-configuration\n"
"         (inherit config)\n"
"         (auto-login user))\n"
"        config))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1649
#, no-wrap
msgid ""
"(define %my-services\n"
"  (modify-services %base-services\n"
"    ;; @dots{}\n"
"    (mingetty-service-type config =>\n"
"                           (auto-login-to-tty\n"
"                            config \"tty3\" \"alice\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1653
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services %my-services))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1658
msgid "One could also @code{compose} (@pxref{Higher-Order Functions,,, guile, The Guile Reference Manual}) @code{auto-login-to-tty} to login multiple users to multiple ttys."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1665
msgid "Finally, here is a note of caution.  Setting up auto login to a TTY, means that anyone can turn on your computer and run commands as your regular user.  However, if you have an encrypted root partition, and thus already need to enter a passphrase when the system boots, auto-login might be a convenient option."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1677
msgid "Guix is, at its core, a source based distribution with substitutes (@pxref{Substitutes,,, guix, GNU Guix Reference Manual}), and as such building packages from their source code is an expected part of regular package installations and upgrades.  Given this starting point, it makes sense that efforts are made to reduce the amount of time spent compiling packages, and recent changes and upgrades to the building and distribution of substitutes continues to be a topic of discussion within Guix."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1683
msgid "The kernel, while not requiring an overabundance of RAM to build, does take a rather long time on an average machine.  The official kernel configuration, as is the case with many GNU/Linux distributions, errs on the side of inclusiveness, and this is really what causes the build to take such a long time when the kernel is built from source."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1688
msgid "The Linux kernel, however, can also just be described as a regular old package, and as such can be customized just like any other package.  The procedure is a little bit different, although this is primarily due to the nature of how the package definition is written."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1691
msgid "The @code{linux-libre} kernel package definition is actually a procedure which creates a package."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1702
#, no-wrap
msgid ""
"(define* (make-linux-libre* version gnu-revision source supported-systems\n"
"                            #:key\n"
"                            (extra-version #f)\n"
"                            ;; A function that takes an arch and a variant.\n"
"                            ;; See kernel-config for an example.\n"
"                            (configuration-file #f)\n"
"                            (defconfig \"defconfig\")\n"
"                            (extra-options (default-extra-linux-options version)))\n"
"  ...)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1706
msgid "The current @code{linux-libre} package is for the 5.15.x series, and is declared like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1715
#, no-wrap
msgid ""
"(define-public linux-libre-5.15\n"
"  (make-linux-libre* linux-libre-5.15-version\n"
"                     linux-libre-5.15-gnu-revision\n"
"                     linux-libre-5.15-source\n"
"                     '(\"x86_64-linux\" \"i686-linux\" \"armhf-linux\"\n"
"                       \"aarch64-linux\" \"riscv64-linux\")\n"
"                     #:configuration-file kernel-config))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1722
msgid "Any keys which are not assigned values inherit their default value from the @code{make-linux-libre} definition.  When comparing the two snippets above, notice the code comment that refers to @code{#:configuration-file}.  Because of this, it is not actually easy to include a custom kernel configuration from the definition, but don't worry, there are other ways to work with what we do have."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1728
msgid "There are two ways to create a kernel with a custom kernel configuration.  The first is to provide a standard @file{.config} file during the build process by including an actual @file{.config} file as a native input to our custom kernel.  The following is a snippet from the custom @code{'configure} phase of the @code{make-linux-libre} package definition:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1732
#, no-wrap
msgid ""
"(let ((build  (assoc-ref %standard-phases 'build))\n"
"      (config (assoc-ref (or native-inputs inputs) \"kconfig\")))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1740
#, no-wrap
msgid ""
"  ;; Use a custom kernel configuration file or a default\n"
"  ;; configuration file.\n"
"  (if config\n"
"      (begin\n"
"        (copy-file config \".config\")\n"
"        (chmod \".config\" #o666))\n"
"      (invoke \"make\" ,defconfig)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1745
msgid "Below is a sample kernel package.  The @code{linux-libre} package is nothing special and can be inherited from and have its fields overridden like any other package:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1754
#, no-wrap
msgid ""
"(define-public linux-libre/E2140\n"
"  (package\n"
"    (inherit linux-libre)\n"
"    (native-inputs\n"
"     `((\"kconfig\" ,(local-file \"E2140.config\"))\n"
"      ,@@(alist-delete \"kconfig\"\n"
"                      (package-native-inputs linux-libre))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1761
msgid "In the same directory as the file defining @code{linux-libre-E2140} is a file named @file{E2140.config}, which is an actual kernel configuration file.  The @code{defconfig} keyword of @code{make-linux-libre} is left blank here, so the only kernel configuration in the package is the one which was included in the @code{native-inputs} field."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1766
msgid "The second way to create a custom kernel is to pass a new value to the @code{extra-options} keyword of the @code{make-linux-libre} procedure.  The @code{extra-options} keyword works with another function defined right below it:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1782
#, no-wrap
msgid ""
"(define (default-extra-linux-options version)\n"
"  `(;; https://lists.gnu.org/archive/html/guix-devel/2014-04/msg00039.html\n"
"   (\"CONFIG_DEVPTS_MULTIPLE_INSTANCES\" . #true)\n"
"   ;; Modules required for initrd:\n"
"   (\"CONFIG_NET_9P\" . m)\n"
"   (\"CONFIG_NET_9P_VIRTIO\" . m)\n"
"   (\"CONFIG_VIRTIO_BLK\" . m)\n"
"   (\"CONFIG_VIRTIO_NET\" . m)\n"
"   (\"CONFIG_VIRTIO_PCI\" . m)\n"
"   (\"CONFIG_VIRTIO_BALLOON\" . m)\n"
"   (\"CONFIG_VIRTIO_MMIO\" . m)\n"
"   (\"CONFIG_FUSE_FS\" . m)\n"
"   (\"CONFIG_CIFS\" . m)\n"
"   (\"CONFIG_9P_FS\" . m)))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1793
#, no-wrap
msgid ""
"(define (config->string options)\n"
"  (string-join (map (match-lambda\n"
"                      ((option . 'm)\n"
"                       (string-append option \"=m\"))\n"
"                      ((option . #true)\n"
"                       (string-append option \"=y\"))\n"
"                      ((option . #false)\n"
"                       (string-append option \"=n\")))\n"
"                    options)\n"
"               \"\\n\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1796
msgid "And in the custom configure script from the `make-linux-libre` package:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1804
#, no-wrap
msgid ""
";; Appending works even when the option wasn't in the\n"
";; file.  The last one prevails if duplicated.\n"
"(let ((port (open-file \".config\" \"a\"))\n"
"      (extra-configuration ,(config->string extra-options)))\n"
"  (display extra-configuration port)\n"
"  (close-port port))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1806
#, no-wrap
msgid "(invoke \"make\" \"oldconfig\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1811
msgid "So by not providing a configuration-file the @file{.config} starts blank, and then we write into it the collection of flags that we want.  Here's another custom kernel:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1819
#, no-wrap
msgid ""
"(define %macbook41-full-config\n"
"  (append %macbook41-config-options\n"
"          %file-systems\n"
"          %efi-support\n"
"          %emulation\n"
"          ((@@@@ (gnu packages linux) default-extra-linux-options) version)))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1830
#, no-wrap
msgid ""
"(define-public linux-libre-macbook41\n"
"  ;; XXX: Access the internal 'make-linux-libre*' procedure, which is\n"
"  ;; private and unexported, and is liable to change in the future.\n"
"  ((@@@@ (gnu packages linux) make-linux-libre*)\n"
"   (@@@@ (gnu packages linux) linux-libre-version)\n"
"   (@@@@ (gnu packages linux) linux-libre-gnu-revision)\n"
"   (@@@@ (gnu packages linux) linux-libre-source)\n"
"   '(\"x86_64-linux\")\n"
"   #:extra-version \"macbook41\"\n"
"   #:extra-options %macbook41-config-options))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1838
msgid "In the above example @code{%file-systems} is a collection of flags enabling different file system support, @code{%efi-support} enables EFI support and @code{%emulation} enables a x86_64-linux machine to act in 32-bit mode also.  The @code{default-extra-linux-options} procedure is the one defined above, which had to be used to avoid losing the default configuration options of the @code{extra-options} keyword."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1847
msgid "This all sounds like it should be doable, but how does one even know which modules are required for a particular system? Two places that can be helpful in trying to answer this question is the @uref{https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel, Gentoo Handbook} and the @uref{https://www.kernel.org/doc/html/latest/admin-guide/README.html?highlight=localmodconfig, documentation from the kernel itself}.  From the kernel documentation, it seems that @code{make localmodconfig} is the command we want."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1850
msgid "In order to actually run @code{make localmodconfig} we first need to get and unpack the kernel source code:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1853
#, no-wrap
msgid "tar xf $(guix build linux-libre --source)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1860
msgid "Once inside the directory containing the source code run @code{touch .config} to create an initial, empty @file{.config} to start with.  @code{make localmodconfig} works by seeing what you already have in @file{.config} and letting you know what you're missing.  If the file is blank then you're missing everything.  The next step is to run:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1863
#, no-wrap
msgid "guix shell -D linux-libre -- make localmodconfig\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1868
msgid "and note the output.  Do note that the @file{.config} file is still empty.  The output generally contains two types of warnings.  The first start with \"WARNING\" and can actually be ignored in our case.  The second read:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1871
#, no-wrap
msgid "module pcspkr did not have configs CONFIG_INPUT_PCSPKR\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1876
msgid "For each of these lines, copy the @code{CONFIG_XXXX_XXXX} portion into the @file{.config} in the directory, and append @code{=m}, so in the end it looks like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1880
#, no-wrap
msgid ""
"CONFIG_INPUT_PCSPKR=m\n"
"CONFIG_VIRTIO=m\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1889
msgid "After copying all the configuration options, run @code{make localmodconfig} again to make sure that you don't have any output starting with ``module''.  After all of these machine specific modules there are a couple more left that are also needed.  @code{CONFIG_MODULES} is necessary so that you can build and load modules separately and not have everything built into the kernel.  @code{CONFIG_BLK_DEV_SD} is required for reading from hard drives.  It is possible that there are other modules which you will need."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1893
msgid "This post does not aim to be a guide to configuring your own kernel however, so if you do decide to build a custom kernel you'll have to seek out other guides to create a kernel which is just right for your needs."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1901
msgid "The second way to setup the kernel configuration makes more use of Guix's features and allows you to share configuration segments between different kernels.  For example, all machines using EFI to boot have a number of EFI configuration flags that they need.  It is likely that all the kernels will share a list of file systems to support.  By using variables it is easier to see at a glance what features are enabled and to make sure you don't have features in one kernel but missing in another."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1906
msgid "Left undiscussed however, is Guix's initrd and its customization.  It is likely that you'll need to modify the initrd on a machine using a custom kernel, since certain modules which are expected to be built may not be available for inclusion into the initrd."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1913
msgid "Historically, Guix System is centered around an @code{operating-system} structure.  This structure contains various fields ranging from the bootloader and kernel declaration to the services to install."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1919
msgid "Depending on the target machine, that can go from a standard @code{x86_64} machine to a small ARM single board computer such as the Pine64, the image constraints can vary a lot.  The hardware manufacturers will impose different image formats with various partition sizes and offsets."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1924
msgid "To create images suitable for all those machines, a new abstraction is necessary: that's the goal of the @code{image} record.  This record contains all the required information to be transformed into a standalone image, that can be directly booted on any target machine."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1946
#, no-wrap
msgid ""
"(define-record-type* <image>\n"
"  image make-image\n"
"  image?\n"
"  (name               image-name ;symbol\n"
"                      (default #f))\n"
"  (format             image-format) ;symbol\n"
"  (target             image-target\n"
"                      (default #f))\n"
"  (size               image-size  ;size in bytes as integer\n"
"                      (default 'guess))\n"
"  (operating-system   image-operating-system  ;<operating-system>\n"
"                      (default #f))\n"
"  (partitions         image-partitions ;list of <partition>\n"
"                      (default '()))\n"
"  (compression?       image-compression? ;boolean\n"
"                      (default #t))\n"
"  (volatile-root?     image-volatile-root? ;boolean\n"
"                      (default #t))\n"
"  (substitutable?     image-substitutable? ;boolean\n"
"                      (default #t)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1952
msgid "This record contains the operating-system to instantiate. The @code{format} field defines the image type and can be @code{efi-raw}, @code{qcow2} or @code{iso9660} for instance. In the future, it could be extended to @code{docker} or other image types."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1955
msgid "A new directory in the Guix sources is dedicated to images definition. For now there are four files:"
msgstr ""

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1957
#, no-wrap
msgid "gnu/system/images/hurd.scm"
msgstr ""

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1958
#, no-wrap
msgid "gnu/system/images/pine64.scm"
msgstr ""

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1959
#, no-wrap
msgid "gnu/system/images/novena.scm"
msgstr ""

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1960
#, no-wrap
msgid "gnu/system/images/pinebook-pro.scm"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1966
msgid "Let's have a look to @file{pine64.scm}. It contains the @code{pine64-barebones-os} variable which is a minimal definition of an operating-system dedicated to the @b{Pine A64 LTS} board."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1990
#, no-wrap
msgid ""
"(define pine64-barebones-os\n"
"  (operating-system\n"
"   (host-name \"vignemale\")\n"
"   (timezone \"Europe/Paris\")\n"
"   (locale \"en_US.utf8\")\n"
"   (bootloader (bootloader-configuration\n"
"                (bootloader u-boot-pine64-lts-bootloader)\n"
"                (targets '(\"/dev/vda\"))))\n"
"   (initrd-modules '())\n"
"   (kernel linux-libre-arm64-generic)\n"
"   (file-systems (cons (file-system\n"
"                        (device (file-system-label \"my-root\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                       %base-file-systems))\n"
"   (services (cons (service agetty-service-type\n"
"                            (agetty-configuration\n"
"                             (extra-options '(\"-L\")) ; no carrier detect\n"
"                             (baud-rate \"115200\")\n"
"                             (term \"vt100\")\n"
"                             (tty \"ttyS0\")))\n"
"                   %base-services))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1994
msgid "The @code{kernel} and @code{bootloader} fields are pointing to packages dedicated to this board."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1996
msgid "Right below, the @code{pine64-image-type} variable is also defined."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2002
#, no-wrap
msgid ""
"(define pine64-image-type\n"
"  (image-type\n"
"   (name 'pine64-raw)\n"
"   (constructor (cut image-with-os arm64-disk-image <>))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2006
msgid "It's using a record we haven't talked about yet, the @code{image-type} record, defined this way:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2013
#, no-wrap
msgid ""
"(define-record-type* <image-type>\n"
"  image-type make-image-type\n"
"  image-type?\n"
"  (name           image-type-name) ;symbol\n"
"  (constructor    image-type-constructor)) ;<operating-system> -> <image>\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2019
msgid "The main purpose of this record is to associate a name to a procedure transforming an @code{operating-system} to an image.  To understand why it is necessary, let's have a look to the command producing an image from an @code{operating-system} configuration file:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2022
#, no-wrap
msgid "guix system image my-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2028
msgid "This command expects an @code{operating-system} configuration but how should we indicate that we want an image targeting a Pine64 board? We need to provide an extra information, the @code{image-type}, by passing the @code{--image-type} or @code{-t} flag, this way:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2031
#, no-wrap
msgid "guix system image --image-type=pine64-raw my-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2037
msgid "This @code{image-type} parameter points to the @code{pine64-image-type} defined above. Hence, the @code{operating-system} declared in @code{my-os.scm} will be applied the @code{(cut image-with-os arm64-disk-image <>)} procedure to turn it into an image."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2039
msgid "The resulting image looks like:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2049
#, no-wrap
msgid ""
"(image\n"
" (format 'disk-image)\n"
" (target \"aarch64-linux-gnu\")\n"
" (operating-system my-os)\n"
" (partitions\n"
"  (list (partition\n"
"         (inherit root-partition)\n"
"         (offset root-offset)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2053
msgid "which is the aggregation of the @code{operating-system} defined in @code{my-os.scm} to the @code{arm64-disk-image} record."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2055
msgid "But enough Scheme madness. What does this image API bring to the Guix user?"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2057
msgid "One can run:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2061
#, no-wrap
msgid ""
"mathieu@@cervin:~$ guix system --list-image-types\n"
"The available image types are:\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2079
#, no-wrap
msgid ""
"   - unmatched-raw\n"
"   - rock64-raw\n"
"   - pinebook-pro-raw\n"
"   - pine64-raw\n"
"   - novena-raw\n"
"   - hurd-raw\n"
"   - hurd-qcow2\n"
"   - qcow2\n"
"   - iso9660\n"
"   - uncompressed-iso9660\n"
"   - tarball\n"
"   - efi-raw\n"
"   - mbr-raw\n"
"   - docker\n"
"   - wsl2\n"
"   - raw-with-offset\n"
"   - efi32-raw\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2084
msgid "and by writing an @code{operating-system} file based on @code{pine64-barebones-os}, you can customize your image to your preferences in a file (@file{my-pine-os.scm}) like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2088
#, no-wrap
msgid ""
"(use-modules (gnu services linux)\n"
"             (gnu system images pine64))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2099
#, no-wrap
msgid ""
"(let ((base-os pine64-barebones-os))\n"
"  (operating-system\n"
"    (inherit base-os)\n"
"    (timezone \"America/Indiana/Indianapolis\")\n"
"    (services\n"
"     (cons\n"
"      (service earlyoom-service-type\n"
"               (earlyoom-configuration\n"
"                (prefer-regexp \"icecat|chromium\")))\n"
"      (operating-system-user-services base-os)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2102
msgid "run:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2105
#, no-wrap
msgid "guix system image --image-type=pine64-raw my-pine-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2108
msgid "or,"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2111
#, no-wrap
msgid "guix system image --image-type=hurd-raw my-hurd-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2115
msgid "to get an image that can be written directly to a hard drive and booted from."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2117
msgid "Without changing anything to @code{my-hurd-os.scm}, calling:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2120
#, no-wrap
msgid "guix system image --image-type=hurd-qcow2 my-hurd-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2123
msgid "will instead produce a Hurd QEMU image."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2126
#, no-wrap
msgid "2FA, two-factor authentication"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2127
#, no-wrap
msgid "U2F, Universal 2nd Factor"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2128
#, no-wrap
msgid "security key, configuration"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2135
msgid "The use of security keys can improve your security by providing a second authentication source that cannot be easily stolen or copied, at least for a remote adversary (something that you have), to the main secret (a passphrase -- something that you know), reducing the risk of impersonation."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2140
msgid "The example configuration detailed below showcases what minimal configuration needs to be made on your Guix System to allow the use of a Yubico security key.  It is hoped the configuration can be useful for other security keys as well, with minor adjustments."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2141
#, no-wrap
msgid "Configuration for use as a two-factor authenticator (2FA)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2149
msgid "To be usable, the udev rules of the system should be extended with key-specific rules.  The following shows how to extend your udev rules with the @file{lib/udev/rules.d/70-u2f.rules} udev rule file provided by the @code{libfido2} package from the @code{(gnu packages security-token)} module and add your user to the @samp{\"plugdev\"} group it uses:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2168
#, no-wrap
msgid ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (users (cons* (user-account\n"
"               (name \"your-user\")\n"
"               (group \"users\")\n"
"               (supplementary-groups\n"
"\t\t'(\"wheel\" \"netdev\" \"audio\" \"video\"\n"
"                  \"plugdev\"))           ;<- added system group\n"
"               (home-directory \"/home/your-user\"))\n"
"              %base-user-accounts))\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'fido2 libfido2 #:groups '(\"plugdev\")))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2173
msgid "After re-configuring your system and re-logging in your graphical session so that the new group is in effect for your user, you can verify that your key is usable by launching:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2176
#, no-wrap
msgid "guix shell ungoogled-chromium -- chromium chrome://settings/securityKeys\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2182
msgid "and validating that the security key can be reset via the ``Reset your security key'' menu.  If it works, congratulations, your security key is ready to be used with applications supporting two-factor authentication (2FA)."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2183
#, no-wrap
msgid "Disabling OTP code generation for a Yubikey"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2184
#, no-wrap
msgid "disabling yubikey OTP"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2190
msgid "If you use a Yubikey security key and are irritated by the spurious OTP codes it generates when inadvertently touching the key (e.g. causing you to become a spammer in the @samp{#guix} channel when discussing from your favorite IRC client!), you can disable it via the following @command{ykman} command:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2193
#, no-wrap
msgid "guix shell python-yubikey-manager -- ykman config usb --force --disable OTP\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2200
msgid "Alternatively, you could use the @command{ykman-gui} command provided by the @code{yubikey-manager-qt} package and either wholly disable the @samp{OTP} application for the USB interface or, from the @samp{Applications -> OTP} view, delete the slot 1 configuration, which comes pre-configured with the Yubico OTP application."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2201
#, no-wrap
msgid "Requiring a Yubikey to open a KeePassXC database"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2202
#, no-wrap
msgid "yubikey, keepassxc integration"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2206
msgid "The KeePassXC password manager application has support for Yubikeys, but it requires installing a udev rules for your Guix System and some configuration of the Yubico OTP application on the key."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2209
msgid "The necessary udev rules file comes from the @code{yubikey-personalization} package, and can be installed like:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2219
#, no-wrap
msgid ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'yubikey yubikey-personalization))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2226
msgid "After reconfiguring your system (and reconnecting your Yubikey), you'll then want to configure the OTP challenge/response application of your Yubikey on its slot 2, which is what KeePassXC uses.  It's easy to do so via the Yubikey Manager graphical configuration tool, which can be invoked with:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2229
#, no-wrap
msgid "guix shell yubikey-manager-qt -- ykman-gui\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2238
msgid "First, ensure @samp{OTP} is enabled under the @samp{Interfaces} tab, then navigate to @samp{Applications -> OTP}, and click the @samp{Configure} button under the @samp{Long Touch (Slot 2)} section.  Select @samp{Challenge-response}, input or generate a secret key, and click the @samp{Finish} button.  If you have a second Yubikey you'd like to use as a backup, you should configure it the same way, using the @emph{same} secret key."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2245
msgid "Your Yubikey should now be detected by KeePassXC.  It can be added to a database by navigating to KeePassXC's @samp{Database -> Database Security...} menu, then clicking the @samp{Add additional protection...} button, then @samp{Add Challenge-Response}, selecting the security key from the drop-down menu and clicking the @samp{OK} button to complete the setup."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2249
#, no-wrap
msgid "dynamic DNS, DDNS"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2259
msgid "If your @acronym{ISP, Internet Service Provider} only provides dynamic IP addresses, it can be useful to setup a dynamic @acronym{DNS, Domain Name System} (also known as @acronym{DDNS, Dynamic DNS}) service to associate a static host name to a public but dynamic (often changing) IP address.  There are multiple existing services that can be used for this; in the following mcron job, @url{https://duckdns.org, DuckDNS} is used.  It should also work with other dynamic DNS services that offer a similar interface to update the IP address, such as @url{https://freedns.afraid.org/}, with minor adjustments."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2264
msgid "The mcron job is provided below, where @var{DOMAIN} should be substituted for your own domain prefix, and the DuckDNS provided token associated to @var{DOMAIN} added to the @file{/etc/duckdns/@var{DOMAIN}.token} file."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2284
#, no-wrap
msgid ""
"(define duckdns-job\n"
"  ;; Update personal domain IP every 5 minutes.\n"
"  #~(job '(next-minute (range 0 60 5))\n"
"\t #$(program-file\n"
"            \"duckdns-update\"\n"
"            (with-extensions (list guile-gnutls) ;required by (web client)\n"
"              #~(begin\n"
"                  (use-modules (ice-9 textual-ports)\n"
"                               (web client))\n"
"                  (let ((token (string-trim-both\n"
"                                (call-with-input-file \"/etc/duckdns/@var{DOMAIN}.token\"\n"
"                                  get-string-all)))\n"
"                        (query-template (string-append \"https://www.duckdns.org/\"\n"
"                                                       \"update?domains=@var{DOMAIN}\"\n"
"                                                       \"&token=~a&ip=\")))\n"
"                    (http-get (format #f query-template token))))))\n"
"         \"duckdns-update\"\n"
"         #:user \"nobody\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2288
msgid "The job then needs to be added to the list of mcron jobs for your system, using something like:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2297
#, no-wrap
msgid ""
"(operating-system\n"
" (services\n"
"  (cons* (service mcron-service-type\n"
"           (mcron-configuration\n"
"             (jobs (list duckdns-job ...))))\n"
"         ...\n"
"         %base-services)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2305
msgid "To connect to a Wireguard VPN server you need the kernel module to be loaded in memory and a package providing networking tools that support it (e.g.  @code{wireguard-tools} or @code{network-manager})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2309
msgid "Here is a configuration example for Linux-Libre < 5.6, where the module is out of tree and need to be loaded manually---following revisions of the kernel have it built-in and so don't need such configuration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2314
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules desktop)\n"
"(use-package-modules vpn)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2323
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (services (cons (simple-service 'wireguard-module\n"
"                                  kernel-module-loader-service-type\n"
"                                  '(\"wireguard\"))\n"
"                  %desktop-services))\n"
"  (packages (cons wireguard-tools %base-packages))\n"
"  (kernel-loadable-modules (list wireguard-linux-compat)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2327
msgid "After reconfiguring and restarting your system you can either use Wireguard tools or NetworkManager to connect to a VPN server."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2328
#, no-wrap
msgid "Using Wireguard tools"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2334
msgid "To test your Wireguard setup it is convenient to use @command{wg-quick}.  Just give it a configuration file @command{wg-quick up ./wg0.conf}; or put that file in @file{/etc/wireguard} and run @command{wg-quick up wg0} instead."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2338
msgid "Be warned that the author described this command as a: “[…] very quick and dirty bash script […]”."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2340
#, no-wrap
msgid "Using NetworkManager"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2348
msgid "Thanks to NetworkManager support for Wireguard we can connect to our VPN using @command{nmcli} command.  Up to this point this guide assumes that you're using Network Manager service provided by @code{%desktop-services}.  Ortherwise you need to adjust your services list to load @code{network-manager-service-type} and reconfigure your Guix system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2350
msgid "To import your VPN configuration execute nmcli import command:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2354
#, no-wrap
msgid ""
"# nmcli connection import type wireguard file wg0.conf\n"
"Connection 'wg0' (edbee261-aa5a-42db-b032-6c7757c60fde) successfully added\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2359
msgid "This will create a configuration file in @file{/etc/NetworkManager/wg0.nmconnection}.  Next connect to the Wireguard server:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2363
#, no-wrap
msgid ""
"$ nmcli connection up wg0\n"
"Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2367
msgid "By default NetworkManager will connect automatically on system boot.  To change that behaviour you need to edit your config:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2370
#, no-wrap
msgid "# nmcli connection modify wg0 connection.autoconnect no\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2375
msgid "For more specific information about NetworkManager and wireguard @uref{https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/,see this post by thaller}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2378
#, no-wrap
msgid "wm"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2387
#, no-wrap
msgid "stumpwm"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2392
msgid "You could install StumpWM with a Guix system by adding @code{stumpwm} and optionally @code{`(,stumpwm \"lib\")} packages to a system configuration file, e.g.@: @file{/etc/config.scm}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2394
msgid "An example configuration can look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2398
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules wm)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2403
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    %base-packages)))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2405
#, no-wrap
msgid "stumpwm fonts"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2409
msgid "By default StumpWM uses X11 fonts, which could be small or pixelated on your system.  You could fix this by installing StumpWM contrib Lisp module @code{sbcl-ttf-fonts}, adding it to Guix system packages:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2413
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules fonts wm)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2418
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    sbcl-ttf-fonts font-dejavu %base-packages)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2422
msgid "Then you need to add the following code to a StumpWM configuration file @file{~/.stumpwm.d/init.lisp}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2431
#, no-wrap
msgid ""
"(require :ttf-fonts)\n"
"(setf xft:*font-dirs* '(\"/run/current-system/profile/share/fonts/\"))\n"
"(setf clx-truetype:+font-cache-filename+ (concat (getenv \"HOME\")\n"
"                                                 \"/.fonts/font-cache.sexp\"))\n"
"(xft:cache-fonts)\n"
"(set-font (make-instance 'xft:font :family \"DejaVu Sans Mono\"\n"
"                                   :subfamily \"Book\" :size 11))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2435
#, no-wrap
msgid "sessionlock"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2441
msgid "Depending on your environment, locking the screen of your session might come built in or it might be something you have to set up yourself. If you use a desktop environment like GNOME or KDE, it's usually built in. If you use a plain window manager like StumpWM or EXWM, you might have to set it up yourself."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2453
msgid "If you use Xorg, you can use the utility @uref{https://www.mankier.com/1/xss-lock, xss-lock} to lock the screen of your session.  xss-lock is triggered by DPMS which since Xorg 1.8 is auto-detected and enabled if ACPI is also enabled at kernel runtime."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2456
msgid "To use xss-lock, you can simple execute it and put it into the background before you start your window manager from e.g. your @file{~/.xsession}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2460
#, no-wrap
msgid ""
"xss-lock -- slock &\n"
"exec stumpwm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2464
msgid "In this example, xss-lock uses @code{slock} to do the actual locking of the screen when it determines it's appropriate, like when you suspend your device."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2468
msgid "For slock to be allowed to be a screen locker for the graphical session, it needs to be made setuid-root so it can authenticate users, and it needs a PAM service. This can be achieved by adding the following service to your @file{config.scm}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2474
#, no-wrap
msgid ""
"(service screen-locker-service-type\n"
"         (screen-locker-configuration\n"
"          (name \"slock\")\n"
"          (program (file-append slock \"/bin/slock\"))))\n"
msgstr ""
"(service screen-locker-service-type\n"
"         (screen-locker-configuration\n"
"          (name \"slock\")\n"
"          (program (file-append slock \"/bin/slock\"))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2480
msgid "If you manually lock your screen, e.g. by directly calling slock when you want to lock your screen but not suspend it, it's a good idea to notify xss-lock about this so no confusion occurs. This can be done by executing @code{xset s activate} immediately before you execute slock."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2483
#, no-wrap
msgid "linode, Linode"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2488
msgid "To run Guix on a server hosted by @uref{https://www.linode.com, Linode}, start with a recommended Debian server.  We recommend using the default distro as a way to bootstrap Guix. Create your SSH keys."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2491
#, no-wrap
msgid "ssh-keygen\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2497
msgid "Be sure to add your SSH key for easy login to the remote server.  This is trivially done via Linode's graphical interface for adding SSH keys.  Go to your profile and click add SSH Key.  Copy into it the output of:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2500
#, no-wrap
msgid "cat ~/.ssh/<username>_rsa.pub\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2503
msgid "Power the Linode down."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2507
msgid "In the Linode's Storage tab, resize the Debian disk to be smaller.  30 GB free space is recommended.  Then click \"Add a disk\", and fill out the form with the following:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2511
msgid "Label: \"Guix\""
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2514
msgid "Filesystem: ext4"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2517
msgid "Set it to the remaining size"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2522
msgid "In the Configurations tab, press \"Edit\" on the default Debian profile.  Under \"Block Device Assignment\" click \"Add a Device\". It should be @file{/dev/sdc} and you can select the \"Guix\" disk. Save Changes."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2524
msgid "Now \"Add a Configuration\", with the following:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2527
msgid "Label: Guix"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2530
msgid "Kernel:GRUB 2 (it's at the bottom! This step is @b{IMPORTANT!})"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2533
msgid "Block device assignment:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2536
msgid "@file{/dev/sda}: Guix"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2539
msgid "@file{/dev/sdb}: swap"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2542
msgid "Root device: @file{/dev/sda}"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2545
msgid "Turn off all the filesystem/boot helpers"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2552
msgid "Now power it back up, booting with the Debian configuration.  Once it's running, ssh to your server via @code{ssh root@@@var{<your-server-IP-here>}}. (You can find your server IP address in your Linode Summary section.) Now you can run the \"install guix from @pxref{Binary Installation,,, guix, GNU Guix}\" steps:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2560
#, no-wrap
msgid ""
"sudo apt-get install gpg\n"
"wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n"
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2564
msgid "Now it's time to write out a config for the server.  The key information is below. Save the resulting file as @file{guix-config.scm}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2574
#, no-wrap
msgid ""
"(use-modules (gnu)\n"
"             (guix modules))\n"
"(use-service-modules networking\n"
"                     ssh)\n"
"(use-package-modules admin\n"
"                     package-management\n"
"                     ssh\n"
"                     tls)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2591
#, no-wrap
msgid ""
"(operating-system\n"
"  (host-name \"my-server\")\n"
"  (timezone \"America/New_York\")\n"
"  (locale \"en_US.UTF-8\")\n"
"  ;; This goofy code will generate the grub.cfg\n"
"  ;; without installing the grub bootloader on disk.\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader\n"
"                (bootloader\n"
"                 (inherit grub-bootloader)\n"
"                 (installer #~(const #true))))))\n"
"  (file-systems (cons (file-system\n"
"                        (device \"/dev/sda\")\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2594
#, no-wrap
msgid ""
"  (swap-devices (list \"/dev/sdb\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2598
#, no-wrap
msgid ""
"  (initrd-modules (cons \"virtio_scsi\"    ; Needed to find the disk\n"
"                        %base-initrd-modules))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2607
#, no-wrap
msgid ""
"  (users (cons (user-account\n"
"                (name \"janedoe\")\n"
"                (group \"users\")\n"
"                ;; Adding the account to the \"wheel\" group\n"
"                ;; makes it a sudoer.\n"
"                (supplementary-groups '(\"wheel\"))\n"
"                (home-directory \"/home/janedoe\"))\n"
"               %base-user-accounts))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2610
#, no-wrap
msgid ""
"  (packages (cons* openssh-sans-x\n"
"                   %base-packages))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2621
#, no-wrap
msgid ""
"  (services (cons*\n"
"             (service dhcp-client-service-type)\n"
"             (service openssh-service-type\n"
"                      (openssh-configuration\n"
"                       (openssh openssh-sans-x)\n"
"                       (password-authentication? #false)\n"
"                       (authorized-keys\n"
"                        `((\"janedoe\" ,(local-file \"janedoe_rsa.pub\"))\n"
"                          (\"root\" ,(local-file \"janedoe_rsa.pub\"))))))\n"
"             %base-services)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2624
msgid "Replace the following fields in the above configuration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2632
#, no-wrap
msgid ""
"(host-name \"my-server\")       ; replace with your server name\n"
"; if you chose a linode server outside the U.S., then\n"
"; use tzselect to find a correct timezone string\n"
"(timezone \"America/New_York\") ; if needed replace timezone\n"
"(name \"janedoe\")              ; replace with your username\n"
"(\"janedoe\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
"(\"root\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2639
msgid "The last line in the above example lets you log into the server as root and set the initial root password (see the note at the end of this recipe about root login).  After you have done this, you may delete that line from your configuration and reconfigure to prevent root login."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2644
msgid "Copy your ssh public key (eg: @file{~/.ssh/id_rsa.pub}) as @file{@var{<your-username-here>}_rsa.pub} and put @file{guix-config.scm} in the same directory.  In a new terminal run these commands."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2649
#, no-wrap
msgid ""
"sftp root@@<remote server ip address>\n"
"put /path/to/files/<username>_rsa.pub .\n"
"put /path/to/files/guix-config.scm .\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2652
msgid "In your first terminal, mount the guix drive:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2656
#, no-wrap
msgid ""
"mkdir /mnt/guix\n"
"mount /dev/sdc /mnt/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2661
msgid "Due to the way we set up the bootloader section of the guix-config.scm, only the grub configuration file will be installed.  So, we need to copy over some of the other GRUB stuff already installed on the Debian system:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2665
#, no-wrap
msgid ""
"mkdir -p /mnt/guix/boot/grub\n"
"cp -r /boot/grub/* /mnt/guix/boot/grub/\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2668
msgid "Now initialize the Guix installation:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2671
#, no-wrap
msgid "guix system init guix-config.scm /mnt/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2675
msgid "Ok, power it down! Now from the Linode console, select boot and select \"Guix\"."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2678
msgid "Once it boots, you should be able to log in via SSH! (The server config will have changed though.)  You may encounter an error like:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2694
#, no-wrap
msgid ""
"$ ssh root@@<server ip address>\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n"
"Someone could be eavesdropping on you right now (man-in-the-middle attack)!\n"
"It is also possible that a host key has just been changed.\n"
"The fingerprint for the ECDSA key sent by the remote host is\n"
"SHA256:0B+wp33w57AnKQuHCvQP0+ZdKaqYrI/kyU7CfVbS7R4.\n"
"Please contact your system administrator.\n"
"Add correct host key in /home/joshua/.ssh/known_hosts to get rid of this message.\n"
"Offending ECDSA key in /home/joshua/.ssh/known_hosts:3\n"
"ECDSA host key for 198.58.98.76 has changed and you have requested strict checking.\n"
"Host key verification failed.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2698
msgid "Either delete @file{~/.ssh/known_hosts} file, or delete the offending line starting with your server IP address."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2700
msgid "Be sure to set your password and root's password."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2705
#, no-wrap
msgid ""
"ssh root@@<remote ip address>\n"
"passwd  ; for the root password\n"
"passwd <username> ; for the user password\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2712
msgid "You may not be able to run the above commands at this point.  If you have issues remotely logging into your linode box via SSH, then you may still need to set your root and user password initially by clicking on the ``Launch Console'' option in your linode.  Choose the ``Glish'' instead of ``Weblish''.  Now you should be able to ssh into the machine."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2716
msgid "Hooray! At this point you can shut down the server, delete the Debian disk, and resize the Guix to the rest of the size.  Congratulations!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2721
msgid "By the way, if you save it as a disk image right at this point, you'll have an easy time spinning up new Guix images! You may need to down-size the Guix image to 6144MB, to save it as an image.  Then you can resize it again to the max size."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2724
#, no-wrap
msgid "kimsufi, Kimsufi, OVH"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2728
msgid "To run Guix on a server hosted by @uref{https://www.kimsufi.com/, Kimsufi}, click on the netboot tab then select rescue64-pro and restart."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2730
msgid "OVH will email you the credentials required to ssh into a Debian system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2733
msgid "Now you can run the \"install guix from @pxref{Binary Installation,,, guix, GNU Guix}\" steps:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2739
#, no-wrap
msgid ""
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"
msgstr ""
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2742
msgid "Partition the drives and format them, first stop the raid array:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2746
#, no-wrap
msgid ""
"mdadm --stop /dev/md127\n"
"mdadm --zero-superblock /dev/sda2 /dev/sdb2\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2750
msgid "Then wipe the disks and set up the partitions, we will create a RAID 1 array."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2754
#, no-wrap
msgid ""
"wipefs -a /dev/sda\n"
"wipefs -a /dev/sdb\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2763
#, no-wrap
msgid ""
"parted /dev/sda --align=opt -s -m -- mklabel gpt\n"
"parted /dev/sda --align=opt -s -m -- \\\n"
" mkpart bios_grub 1049kb 512MiB \\\n"
" set 1 bios_grub on\n"
"parted /dev/sda --align=opt -s -m -- \\\n"
" mkpart primary 512MiB -512MiB\n"
" set 2 raid on\n"
"parted /dev/sda --align=opt -s -m -- mkpart primary linux-swap 512MiB 100%\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2772
#, no-wrap
msgid ""
"parted /dev/sdb --align=opt -s -m -- mklabel gpt\n"
"parted /dev/sdb --align=opt -s -m -- \\\n"
"     mkpart bios_grub 1049kb 512MiB \\\n"
"     set 1 bios_grub on\n"
"parted /dev/sdb --align=opt -s -m -- \\\n"
"     mkpart primary 512MiB -512MiB \\\n"
"     set 2 raid on\n"
"parted /dev/sdb --align=opt -s -m -- mkpart primary linux-swap 512MiB 100%\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2775
msgid "Create the array:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2779
#, no-wrap
msgid ""
"mdadm --create /dev/md127 --level=1 --raid-disks=2 \\\n"
"  --metadata=0.90 /dev/sda2 /dev/sdb2\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2783
msgid "Now create file systems on the relevant partitions, first the boot partitions:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2787
#, no-wrap
msgid ""
"mkfs.ext4  /dev/sda1\n"
"mkfs.ext4  /dev/sdb1\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2790
msgid "Then the root partition:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2793
#, no-wrap
msgid "mkfs.ext4 /dev/md127\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2796
msgid "Initialize the swap partitions:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2802
#, no-wrap
msgid ""
"mkswap /dev/sda3\n"
"swapon /dev/sda3\n"
"mkswap /dev/sdb3\n"
"swapon /dev/sdb3\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2805
msgid "Mount the guix drive:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2809
#, no-wrap
msgid ""
"mkdir /mnt/guix\n"
"mount /dev/md127 /mnt/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2813
msgid "Now is time to write an operating system declaration @file{os.scm} file; here is a sample:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2818
#, no-wrap
msgid ""
"(use-modules (gnu) (guix))\n"
"(use-service-modules networking ssh vpn virtualization sysctl admin mcron)\n"
"(use-package-modules ssh tls tmux vpn virtualization)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2821
#, no-wrap
msgid ""
"(operating-system\n"
"  (host-name \"kimsufi\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2826
#, no-wrap
msgid ""
"  (bootloader (bootloader-configuration\n"
"\t       (bootloader grub-bootloader)\n"
"\t       (targets (list \"/dev/sda\" \"/dev/sdb\"))\n"
"\t       (terminal-outputs '(console))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2829
#, no-wrap
msgid ""
"  ;; Add a kernel module for RAID-1 (aka. \"mirror\").\n"
"  (initrd-modules (cons* \"raid1\"  %base-initrd-modules))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2835
#, no-wrap
msgid ""
"  (mapped-devices\n"
"   (list (mapped-device\n"
"          (source (list \"/dev/sda2\" \"/dev/sdb2\"))\n"
"          (target \"/dev/md127\")\n"
"          (type raid-device-mapping))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2841
#, no-wrap
msgid ""
"  (swap-devices\n"
"   (list (swap-space\n"
"          (target \"/dev/sda3\"))\n"
"         (swap-space\n"
"          (target \"/dev/sdb3\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2846
#, no-wrap
msgid ""
"  (issue\n"
"   ;; Default contents for /etc/issue.\n"
"   \"\\\n"
"This is the GNU system at Kimsufi.  Welcome.\\n\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2853
#, no-wrap
msgid ""
"  (file-systems (cons* (file-system\n"
"\t\t         (mount-point \"/\")\n"
"\t\t         (device \"/dev/md127\")\n"
"\t\t         (type \"ext4\")\n"
"\t\t         (dependencies mapped-devices))\n"
"\t\t       %base-file-systems))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2861
#, no-wrap
msgid ""
"  (users (cons (user-account\n"
"\t        (name \"guix\")\n"
"\t        (comment \"guix\")\n"
"\t        (group \"users\")\n"
"\t        (supplementary-groups '(\"wheel\"))\n"
"\t        (home-directory \"/home/guix\"))\n"
"\t       %base-user-accounts))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2867
#, no-wrap
msgid ""
"  (sudoers-file\n"
"   (plain-file \"sudoers\" \"\\\n"
"root ALL=(ALL) ALL\n"
"%wheel ALL=(ALL) ALL\n"
"guix ALL=(ALL) NOPASSWD:ALL\\n\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2881
#, no-wrap
msgid ""
"  ;; Globally-installed packages.\n"
"  (packages (cons* tmux gnutls wireguard-tools %base-packages))\n"
"  (services\n"
"   (cons*\n"
"    (service static-networking-service-type\n"
"\t     (list (static-networking\n"
"\t\t    (addresses (list (network-address\n"
"\t\t\t\t      (device \"enp3s0\")\n"
"\t\t\t\t      (value \"@var{server-ip-address}/24\"))))\n"
"\t\t    (routes (list (network-route\n"
"\t\t\t\t   (destination \"default\")\n"
"\t\t\t\t   (gateway \"@var{server-gateway}\"))))\n"
"\t\t    (name-servers '(\"213.186.33.99\")))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2883
#, no-wrap
msgid ""
"    (service unattended-upgrade-service-type)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2898
#, no-wrap
msgid ""
"    (service openssh-service-type\n"
"\t     (openssh-configuration\n"
"\t      (openssh openssh-sans-x)\n"
"\t      (permit-root-login #f)\n"
"\t      (authorized-keys\n"
"\t       `((\"guix\" ,(plain-file \"@var{ssh-key-name.pub}\"\n"
"                                      \"@var{ssh-public-key-content}\"))))))\n"
"    (modify-services %base-services\n"
"      (sysctl-service-type\n"
"       config =>\n"
"       (sysctl-configuration\n"
"\t(settings (append '((\"net.ipv6.conf.all.autoconf\" . \"0\")\n"
"\t\t\t    (\"net.ipv6.conf.all.accept_ra\" . \"0\"))\n"
"\t\t\t  %default-sysctl-settings))))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2903
msgid "Don't forget to substitute the @var{server-ip-address}, @var{server-gateway}, @var{ssh-key-name} and @var{ssh-public-key-content} variables with your own values."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2907
msgid "The gateway is the last usable IP in your block so if you have a server with an IP of @samp{37.187.79.10} then its gateway will be @samp{37.187.79.254}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2910
msgid "Transfer your operating system declaration @file{os.scm} file on the server via the @command{scp} or @command{sftp} commands."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2913
msgid "Now all that is left is to install Guix with a @code{guix system init} and restart."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2918
msgid "However we first need to set up a chroot, because the root partition of the rescue system is mounted on an aufs partition and if you try to install Guix it will fail at the GRUB install step complaining about the canonical path of \"aufs\"."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2920
msgid "Install packages that will be used in the chroot:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2923
#, no-wrap
msgid "guix install bash-static parted util-linux-with-udev coreutils guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2926
msgid "Then run the following to create directories needed for the chroot:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2931
#, no-wrap
msgid ""
"cd /mnt && \\\n"
"mkdir -p bin etc gnu/store root/.guix-profile/ root/.config/guix/current \\\n"
"  var/guix proc sys dev\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2934
msgid "Copy the host resolv.conf in the chroot:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2937
#, no-wrap
msgid "cp /etc/resolv.conf etc/\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2940
msgid "Mount block devices, the store and its database and the current guix config:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2950
#, no-wrap
msgid ""
"mount --rbind /proc /mnt/proc\n"
"mount --rbind /sys /mnt/sys\n"
"mount --rbind /dev /mnt/dev\n"
"mount --rbind /var/guix/ var/guix/\n"
"mount --rbind /gnu/store gnu/store/\n"
"mount --rbind /root/.config/ root/.config/\n"
"mount --rbind /root/.guix-profile/bin/ bin\n"
"mount --rbind /root/.guix-profile root/.guix-profile/\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2953
msgid "Chroot in /mnt and install the system:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2956
#, no-wrap
msgid ""
"chroot /mnt/ /bin/bash\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2958
#, no-wrap
msgid "guix system init /root/os.scm /guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2962
msgid "Finally, from the web user interface (UI), change @samp{netboot} to @samp{boot to disk} and restart (also from the web UI)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2965
msgid "Wait a few minutes and try to ssh with @code{ssh guix@@@var{server-ip-address>} -i @var{path-to-your-ssh-key}}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2968
msgid "You should have a Guix system up and running on Kimsufi; congratulations!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2977
msgid "To bind mount a file system, one must first set up some definitions before the @code{operating-system} section of the system definition.  In this example we will bind mount a folder from a spinning disk drive to @file{/tmp}, to save wear and tear on the primary SSD, without dedicating an entire partition to be mounted as @file{/tmp}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2980
msgid "First, the source drive that hosts the folder we wish to bind mount should be defined, so that the bind mount can depend on it."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2987
#, no-wrap
msgid ""
"(define source-drive ;; \"source-drive\" can be named anything you want.\n"
"   (file-system\n"
"    (device (uuid \"UUID goes here\"))\n"
"    (mount-point \"/path-to-spinning-disk-goes-here\")\n"
"    (type \"ext4\"))) ;Make sure to set this to the appropriate type for your drive.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2991
msgid "The source folder must also be defined, so that guix will know it's not a regular block device, but a folder."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2994
#, no-wrap
msgid ""
";; \"source-directory\" can be named any valid variable name.\n"
"(define (%source-directory) \"/path-to-spinning-disk-goes-here/tmp\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2998
msgid "Finally, inside the @code{file-systems} definition, we must add the mount itself."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3001
#, no-wrap
msgid ""
"(file-systems (cons*\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3003
#, no-wrap
msgid ""
"                ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3006
#, no-wrap
msgid ""
"                ;; Must match the name you gave the source drive in the earlier definition.\n"
"                source-drive\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3017
#, no-wrap
msgid ""
"                (file-system\n"
"                 ;; Make sure \"source-directory\" matches your earlier definition.\n"
"                 (device (%source-directory))\n"
"                 (mount-point \"/tmp\")\n"
"                 ;; We are mounting a folder, not a partition, so this type needs to be \"none\"\n"
"                 (type \"none\")\n"
"                 (flags '(bind-mount))\n"
"                 ;; Ensure \"source-drive\" matches what you've named the variable for the drive.\n"
"                 (dependencies (list source-drive))\n"
"                 )\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3019
#, no-wrap
msgid ""
"                 ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3021
#, no-wrap
msgid "                ))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3028
msgid "Guix daemon can use a HTTP proxy to get substitutes, here we are configuring it to get them via Tor."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:3029
#, no-wrap
msgid "Warning"
msgstr "Предупреждение"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:3035
msgid "@emph{Not all} Guix daemon's traffic will go through Tor! Only HTTP/HTTPS will get proxied; FTP, Git protocol, SSH, etc connections will still go through the clearnet.  Again, this configuration isn't foolproof some of your traffic won't get routed by Tor at all.  Use it at your own risk."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:3041
msgid "Also note that the procedure described here applies only to package substitution. When you update your guix distribution with @command{guix pull}, you still need to use @command{torsocks} if you want to route the connection to guix's git repository servers through Tor."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3046
msgid "Guix's substitute server is available as a Onion service, if you want to use it to get your substitutes through Tor configure your system as follow:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3050
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-module base networking)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3067
#, no-wrap
msgid ""
"(operating-system\n"
"  …\n"
"  (services\n"
"    (cons\n"
"      (service tor-service-type\n"
"              (tor-configuration\n"
"                (config-file (plain-file \"tor-config\"\n"
"                                         \"HTTPTunnelPort 127.0.0.1:9250\"))))\n"
"      (modify-services %base-services\n"
"        (guix-service-type\n"
"          config => (guix-configuration\n"
"                      (inherit config)\n"
"                      ;; ci.guix.gnu.org's Onion service\n"
"                      (substitute-urls \"\\\n"
"@value{SUBSTITUTE-TOR-URL}\")\n"
"                      (http-proxy \"http://localhost:9250\")))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3076
msgid "This will keep a tor process running that provides a HTTP CONNECT tunnel which will be used by @command{guix-daemon}.  The daemon can use other protocols than HTTP(S) to get remote resources, request using those protocols won't go through Tor since we are only setting a HTTP tunnel here.  Note that @code{substitutes-urls} is using HTTPS and not HTTP or it won't work, that's a limitation of Tor's tunnel; you may want to use @command{privoxy} instead to avoid such limitations."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3080
msgid "If you don't want to always get substitutes through Tor but using it just some of the times, then skip the @code{guix-configuration}.  When you want to get a substitute from the Tor tunnel run:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3085
#, no-wrap
msgid ""
"sudo herd set-http-proxy guix-daemon http://localhost:9250\n"
"guix build \\\n"
"  --substitute-urls=@value{SUBSTITUTE-TOR-URL} @dots{}\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3089
#, no-wrap
msgid "nginx, lua, openresty, resty"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3092
msgid "NGINX could be extended with Lua scripts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3095
msgid "Guix provides NGINX service with ability to load Lua module and specific Lua packages, and reply to requests by evaluating Lua scripts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3099
msgid "The following example demonstrates system definition with configuration to evaluate @file{index.lua} Lua script on HTTP request to @uref{http://localhost/hello} endpoint:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3102
#, no-wrap
msgid ""
"local shell = require \"resty.shell\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3106
#, no-wrap
msgid ""
"local stdin = \"\"\n"
"local timeout = 1000  -- ms\n"
"local max_size = 4096  -- byte\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3109
#, no-wrap
msgid ""
"local ok, stdout, stderr, reason, status =\n"
"   shell.run([[/run/current-system/profile/bin/ls /tmp]], stdin, timeout, max_size)\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3111
#, no-wrap
msgid "ngx.say(stdout)\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3142
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules #;… web)\n"
"(use-package-modules #;… lua)\n"
"(operating-system\n"
"  ;; …\n"
"  (services\n"
"   ;; …\n"
"   (service nginx-service-type\n"
"            (nginx-configuration\n"
"             (modules\n"
"              (list\n"
"               (file-append nginx-lua-module \"/etc/nginx/modules/ngx_http_lua_module.so\")))\n"
"             (lua-package-path (list lua-resty-core\n"
"                                     lua-resty-lrucache\n"
"                                     lua-resty-signal\n"
"                                     lua-tablepool\n"
"                                     lua-resty-shell))\n"
"             (lua-package-cpath (list lua-resty-signal))\n"
"             (server-blocks\n"
"              (list (nginx-server-configuration\n"
"                     (server-name '(\"localhost\"))\n"
"                     (listen '(\"80\"))\n"
"                     (root \"/etc\")\n"
"                     (locations (list\n"
"                                 (nginx-location-configuration\n"
"                                  (uri \"/hello\")\n"
"                                  (body (list #~(format #f \"content_by_lua_file ~s;\"\n"
"                                                        #$(local-file \"index.lua\"))))))))))))))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3146
#, no-wrap
msgid "mpd"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3147
#, no-wrap
msgid "music server, headless"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3148
#, no-wrap
msgid "bluetooth, ALSA configuration"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3155
msgid "MPD, the Music Player Daemon, is a flexible server-side application for playing music.  Client programs on different machines on the network --- a mobile phone, a laptop, a desktop workstation --- can connect to it to control the playback of audio files from your local music collection.  MPD decodes the audio files and plays them back on one or many outputs."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3162
msgid "By default MPD will play to the default audio device.  In the example below we make things a little more interesting by setting up a headless music server.  There will be no graphical user interface, no Pulseaudio daemon, and no local audio output.  Instead we will configure MPD with two outputs: a bluetooth speaker and a web server to serve audio streams to any streaming media player."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3168
msgid "Bluetooth is often rather frustrating to set up.  You will have to pair your Bluetooth device and make sure that the device is automatically connected as soon as it powers on.  The Bluetooth system service returned by the @code{bluetooth-service} procedure provides the infrastructure needed to set this up."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3171
msgid "Reconfigure your system with at least the following services and packages:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3181
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3188
msgid "Start the @code{bluetooth} service and then use @command{bluetoothctl} to scan for Bluetooth devices.  Try to identify your Bluetooth speaker and pick out its device ID from the resulting list of devices that is indubitably dominated by a baffling smorgasbord of your neighbors' home automation gizmos.  This only needs to be done once:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3192
#, no-wrap
msgid ""
"$ bluetoothctl \n"
"[NEW] Controller 00:11:22:33:95:7F BlueZ 5.40 [default]\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3195
#, no-wrap
msgid ""
"[bluetooth]# power on\n"
"[bluetooth]# Changing power on succeeded\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3198
#, no-wrap
msgid ""
"[bluetooth]# agent on\n"
"[bluetooth]# Agent registered\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3201
#, no-wrap
msgid ""
"[bluetooth]# default-agent\n"
"[bluetooth]# Default agent request successful\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3208
#, no-wrap
msgid ""
"[bluetooth]# scan on\n"
"[bluetooth]# Discovery started\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: yes\n"
"[NEW] Device AA:BB:CC:A4:AA:CD My Bluetooth Speaker\n"
"[NEW] Device 44:44:FF:2A:20:DC My Neighbor's TV\n"
"@dots{}\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3212
#, no-wrap
msgid ""
"[bluetooth]# pair AA:BB:CC:A4:AA:CD\n"
"Attempting to pair with AA:BB:CC:A4:AA:CD\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3218
#, no-wrap
msgid ""
"[My Bluetooth Speaker]# [CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110b-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110c-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110e-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Paired: yes\n"
"Pairing successful\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3220
#, no-wrap
msgid ""
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: no\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3225
#, no-wrap
msgid ""
"[bluetooth]# \n"
"[bluetooth]# trust AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD Trusted: yes\n"
"Changing AA:BB:CC:A4:AA:CD trust succeeded\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3232
#, no-wrap
msgid ""
"[bluetooth]# \n"
"[bluetooth]# connect AA:BB:CC:A4:AA:CD\n"
"Attempting to connect to AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD RSSI: -63\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"Connection successful\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3237
#, no-wrap
msgid ""
"[My Bluetooth Speaker]# scan off\n"
"[CHG] Device AA:BB:CC:A4:AA:CD RSSI is nil\n"
"Discovery stopped\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: no\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3241
msgid "Congratulations, you can now automatically connect to your Bluetooth speaker!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3251
msgid "It is now time to configure ALSA to use the @emph{bluealsa} Bluetooth module, so that you can define an ALSA pcm device corresponding to your Bluetooth speaker.  For a headless server using @emph{bluealsa} with a fixed Bluetooth device is likely simpler than configuring Pulseaudio and its stream switching behavior.  We configure ALSA by crafting a custom @code{alsa-configuration} for the @code{alsa-service-type}.  The configuration will declare a @code{pcm} type @code{bluealsa} from the @code{bluealsa} module provided by the @code{bluez-alsa} package, and then define a @code{pcm} device of that type for your Bluetooth speaker."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3258
msgid "All that is left then is to make MPD send audio data to this ALSA device.  We also add a secondary MPD output that makes the currently played audio files available as a stream through a web server on port 8080.  When enabled a device on the network could listen to the audio stream by connecting any capable media player to the HTTP server on port 8080, independent of the status of the Bluetooth speaker."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3261
msgid "What follows is the outline of an @code{operating-system} declaration that should accomplish the above-mentioned tasks:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3310
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules audio dbus sound #;… etc)\n"
"(use-package-modules audio linux #;… etc)\n"
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (service mpd-service-type\n"
"            (mpd-configuration\n"
"             (user \"your-username\")\n"
"             (music-dir \"/path/to/your/music\")\n"
"             (address \"192.168.178.20\")\n"
"             (outputs (list (mpd-output\n"
"                             (type \"alsa\")\n"
"                             (name \"MPD\")\n"
"                             (extra-options\n"
"                              ;; Use the same name as in the ALSA\n"
"                              ;; configuration below.\n"
"                              '((device . \"pcm.btspeaker\"))))\n"
"                            (mpd-output\n"
"                             (type \"httpd\")\n"
"                             (name \"streaming\")\n"
"                             (enabled? #false)\n"
"                             (always-on? #true)\n"
"                             (tags? #true)\n"
"                             (mixer-type 'null)\n"
"                             (extra-options\n"
"                              '((encoder . \"vorbis\")\n"
"                                (port    . \"8080\")\n"
"                                (bind-to-address . \"192.168.178.20\")\n"
"                                (max-clients . \"0\") ;no limit\n"
"                                (quality . \"5.0\")\n"
"                                (format  . \"44100:16:1\"))))))))\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)\n"
"   (service alsa-service-type\n"
"            (alsa-configuration\n"
"             (pulseaudio? #false) ;we don't need it\n"
"             (extra-options\n"
"              #~(string-append \"\\\n"
"# Declare Bluetooth audio device type \\\"bluealsa\\\" from bluealsa module\n"
"pcm_type.bluealsa @{\n"
"    lib \\\"\"\n"
"#$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_pcm_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3316
#, no-wrap
msgid ""
"# Declare control device type \\\"bluealsa\\\" from the same module\n"
"ctl_type.bluealsa @{\n"
"    lib \\\"\"\n"
"#$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_ctl_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3323
#, no-wrap
msgid ""
"# Define the actual Bluetooth audio device.\n"
"pcm.btspeaker @{\n"
"    type bluealsa\n"
"    device \\\"AA:BB:CC:A4:AA:CD\\\" # unique device identifier\n"
"    profile \\\"a2dp\\\"\n"
"@}\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3329
#, no-wrap
msgid ""
"# Define an associated controller.\n"
"ctl.btspeaker @{\n"
"    type bluealsa\n"
"@}\n"
"\"))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3333
msgid "Enjoy the music with the MPD client of your choice or a media player capable of streaming via HTTP!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3346
msgid "The kernel Linux provides a number of shared facilities that are available to processes in the system.  These facilities include a shared view on the file system, other processes, network devices, user and group identities, and a few others.  Since Linux 3.19 a user can choose to @emph{unshare} some of these shared facilities for selected processes, providing them (and their child processes) with a different view on the system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3352
msgid "A process with an unshared @code{mount} namespace, for example, has its own view on the file system --- it will only be able to see directories that have been explicitly bound in its mount namespace.  A process with its own @code{proc} namespace will consider itself to be the only process running on the system, running as PID 1."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3359
msgid "Guix uses these kernel features to provide fully isolated environments and even complete Guix System containers, lightweight virtual machines that share the host system's kernel.  This feature comes in especially handy when using Guix on a foreign distribution to prevent interference from foreign libraries or configuration files that are available system-wide."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3371
msgid "The easiest way to get started is to use @command{guix shell} with the @option{--container} option.  @xref{Invoking guix shell,,, guix, GNU Guix Reference Manual} for a reference of valid options."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3378
msgid "The following snippet spawns a minimal shell process with most namespaces unshared from the system.  The current working directory is visible to the process, but anything else on the file system is unavailable.  This extreme isolation can be very useful when you want to rule out any sort of interference from environment variables, globally installed libraries, or configuration files."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3381
#, no-wrap
msgid "guix shell --container\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3388
msgid "It is a bleak environment, barren, desolate.  You will find that not even the GNU coreutils are available here, so to explore this deserted wasteland you need to use built-in shell commands.  Even the usually gigantic @file{/gnu/store} directory is reduced to a faint shadow of itself."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3398
#, no-wrap
msgid ""
"$ echo /gnu/store/*\n"
"/gnu/store/@dots{}-gcc-10.3.0-lib\n"
"/gnu/store/@dots{}-glibc-2.33\n"
"/gnu/store/@dots{}-bash-static-5.1.8\n"
"/gnu/store/@dots{}-ncurses-6.2.20210619\n"
"/gnu/store/@dots{}-bash-5.1.8\n"
"/gnu/store/@dots{}-profile\n"
"/gnu/store/@dots{}-readline-8.1.1\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3400
#, no-wrap
msgid "exiting a container"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3404
msgid "There isn't much you can do in an environment like this other than exiting it.  You can use @key{^D} or @command{exit} to terminate this limited shell environment."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3405
#, no-wrap
msgid "exposing directories, container"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3406
#, no-wrap
msgid "sharing directories, container"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3407
#, no-wrap
msgid "mapping locations, container"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3416
msgid "You can make other directories available inside of the container environment; use @option{--expose=DIRECTORY} to bind-mount the given directory as a read-only location inside the container, or use @option{--share=DIRECTORY} to make the location writable.  With an additional mapping argument after the directory name you can control the name of the directory inside the container.  In the following example we map @file{/etc} on the host system to @file{/the/host/etc} inside a container in which the GNU coreutils are installed."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3420
#, no-wrap
msgid ""
"$ guix shell --container --share=/etc=/the/host/etc coreutils\n"
"$ ls /the/host/etc\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3427
msgid "Similarly, you can prevent the current working directory from being mapped into the container with the @option{--no-cwd} option.  Another good idea is to create a dedicated directory that will serve as the container's home directory, and spawn the container shell from that directory."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3428
#, no-wrap
msgid "hide system libraries, container"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3429
#, no-wrap
msgid "avoid ABI mismatch, container"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3439
msgid "On a foreign system a container environment can be used to compile software that cannot possibly be linked with system libraries or with the system's compiler toolchain.  A common use-case in a research context is to install packages from within an R session.  Outside of a container environment there is a good chance that the foreign compiler toolchain and incompatible system libraries are found first, resulting in incompatible binaries that cannot be used by R.  In a container shell this problem disappears, as system libraries and executables simply aren't available due to the unshared @code{mount} namespace."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3442
msgid "Let's take a comprehensive manifest providing a comfortable development environment for use with R:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3446
#, no-wrap
msgid ""
"(specifications->manifest\n"
"  (list \"r-minimal\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3451
#, no-wrap
msgid ""
"        ;; base packages\n"
"        \"bash-minimal\"\n"
"        \"glibc-locales\"\n"
"        \"nss-certs\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3458
#, no-wrap
msgid ""
"        ;; Common command line tools lest the container is too empty.\n"
"        \"coreutils\"\n"
"        \"grep\"\n"
"        \"which\"\n"
"        \"wget\"\n"
"        \"sed\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3461
#, no-wrap
msgid ""
"        ;; R markdown tools\n"
"        \"pandoc\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3477
#, no-wrap
msgid ""
"        ;; Toolchain and common libraries for \"install.packages\"\n"
"        \"gcc-toolchain@@10\"\n"
"        \"gfortran-toolchain\"\n"
"        \"gawk\"\n"
"        \"tar\"\n"
"        \"gzip\"\n"
"        \"unzip\"\n"
"        \"make\"\n"
"        \"cmake\"\n"
"        \"pkg-config\"\n"
"        \"cairo\"\n"
"        \"libxt\"\n"
"        \"openssl\"\n"
"        \"curl\"\n"
"        \"zlib\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3483
msgid "Let's use this to run R inside a container environment.  For convenience we share the @code{net} namespace to use the host system's network interfaces.  Now we can build R packages from source the traditional way without having to worry about ABI mismatch or incompatibilities."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3486
#, no-wrap
msgid ""
"$ guix shell --container --network --manifest=manifest.scm -- R\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3499
#, no-wrap
msgid ""
"R version 4.2.1 (2022-06-23) -- \"Funny-Looking Kid\"\n"
"Copyright (C) 2022 The R Foundation for Statistical Computing\n"
"@dots{}\n"
"> e <- Sys.getenv(\"GUIX_ENVIRONMENT\")\n"
"> Sys.setenv(GIT_SSL_CAINFO=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_FILE=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_DIR=paste0(e, \"/etc/ssl/certs\"))\n"
"> install.packages(\"Cairo\", lib=paste0(getwd()))\n"
"@dots{}\n"
"* installing *source* package 'Cairo' ...\n"
"@dots{}\n"
"* DONE (Cairo)\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3504
#, no-wrap
msgid ""
"The downloaded source packages are in\n"
"\t'/tmp/RtmpCuwdwM/downloaded_packages'\n"
"> library(\"Cairo\", lib=getwd())\n"
"> # success!\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3512
msgid "Using container shells is fun, but they can become a little cumbersome when you want to go beyond just a single interactive process.  Some tasks become a lot easier when they sit on the rock solid foundation of a proper Guix System and its rich set of system services.  The next section shows you how to launch a complete Guix System inside of a container."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3526
msgid "The Guix System provides a wide array of interconnected system services that are configured declaratively to form a dependable stateless GNU System foundation for whatever tasks you throw at it.  Even when using Guix on a foreign distribution you can benefit from the design of Guix System by running a system instance as a container.  Using the same kernel features of unshared namespaces mentioned in the previous section, the resulting Guix System instance is isolated from the host system and only shares file system locations that you explicitly declare."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3537
msgid "A Guix System container differs from the shell process created by @command{guix shell --container} in a number of important ways.  While in a container shell the containerized process is a Bash shell process, a Guix System container runs the Shepherd as PID 1.  In a system container all system services (@pxref{Services,,, guix, GNU Guix Reference Manual}) are set up just as they would be on a Guix System in a virtual machine or on bare metal---this includes daemons managed by the GNU@tie{}Shepherd (@pxref{Shepherd Services,,, guix, GNU Guix Reference Manual}) as well as other kinds of extensions to the operating system (@pxref{Service Composition,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3544
msgid "The perceived increase in complexity of running a Guix System container is easily justified when dealing with more complex applications that have higher or just more rigid requirements on their execution contexts---configuration files, dedicated user accounts, directories for caches or log files, etc.  In Guix System the demands of this kind of software are satisfied through the deployment of system services."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3557
msgid "A good example might be a PostgreSQL database server.  Much of the complexity of setting up such a database server is encapsulated in this deceptively short service declaration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3562
#, no-wrap
msgid ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql postgresql-14)))\n"
msgstr ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql postgresql-10)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3566
msgid "A complete operating system declaration for use with a Guix System container would look something like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3571
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules databases)\n"
"(use-service-modules databases)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3605
#, no-wrap
msgid ""
"(operating-system\n"
"  (host-name \"container\")\n"
"  (timezone \"Europe/Berlin\")\n"
"  (file-systems (cons (file-system\n"
"                        (device (file-system-label \"does-not-matter\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader grub-bootloader)\n"
"               (targets '(\"/dev/sdX\"))))\n"
"  (services\n"
"   (cons* (service postgresql-service-type\n"
"                   (postgresql-configuration\n"
"                    (postgresql postgresql-14)\n"
"                    (config-file\n"
"                     (postgresql-config-file\n"
"                      (log-destination \"stderr\")\n"
"                      (hba-file\n"
"                       (plain-file \"pg_hba.conf\"\n"
"                                   \"\\\n"
"local\tall\tall\t\t\ttrust\n"
"host\tall\tall\t10.0.0.1/32 \ttrust\"))\n"
"                      (extra-config\n"
"                       '((\"listen_addresses\" \"*\")\n"
"                         (\"log_directory\"    \"/var/log/postgresql\")))))))\n"
"          (service postgresql-role-service-type\n"
"                   (postgresql-role-configuration\n"
"                    (roles\n"
"                     (list (postgresql-role\n"
"                            (name \"test\")\n"
"                            (create-database? #t))))))\n"
"          %base-services)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3613
msgid "With @code{postgresql-role-service-type} we define a role ``test'' and create a matching database, so that we can test right away without any further manual setup.  The @code{postgresql-config-file} settings allow a client from IP address 10.0.0.1 to connect without requiring authentication---a bad idea in production systems, but convenient for this example."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3619
msgid "Let's build a script that will launch an instance of this Guix System as a container.  Write the @code{operating-system} declaration above to a file @file{os.scm} and then use @command{guix system container} to build the launcher.  (@pxref{Invoking guix system,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3627
#, no-wrap
msgid ""
"$ guix system container os.scm\n"
"The following derivations will be built:\n"
"  /gnu/store/@dots{}-run-container.drv\n"
"  @dots{}\n"
"building /gnu/store/@dots{}-run-container.drv...\n"
"/gnu/store/@dots{}-run-container\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3633
msgid "Now that we have a launcher script we can run it to spawn the new system with a running PostgreSQL service.  Note that due to some as yet unresolved limitations we need to run the launcher as the root user, for example with @command{sudo}."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3638
#, no-wrap
msgid ""
"$ sudo /gnu/store/@dots{}-run-container\n"
"system container is running as PID 5983\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3645
msgid "Background the process with @key{Ctrl-z} followed by @command{bg}.  Note the process ID in the output; we will need it to connect to the container later.  You know what? Let's try attaching to the container right now.  We will use @command{nsenter}, a tool provided by the @code{util-linux} package:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3658
#, no-wrap
msgid ""
"$ guix shell util-linux\n"
"$ sudo nsenter -a -t 5983\n"
"root@@container /# pgrep -a postgres\n"
"49 /gnu/store/@dots{}-postgresql-14.4/bin/postgres -D /var/lib/postgresql/data --config-file=/gnu/store/@dots{}-postgresql.conf -p 5432\n"
"51 postgres: checkpointer\n"
"52 postgres: background writer\n"
"53 postgres: walwriter\n"
"54 postgres: autovacuum launcher\n"
"55 postgres: stats collector\n"
"56 postgres: logical replication launcher\n"
"root@@container /# exit\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3661
msgid "The PostgreSQL service is running in the container!"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3665
#, no-wrap
msgid "container networking"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3671
msgid "What good is a Guix System running a PostgreSQL database service as a container when we can only talk to it with processes originating in the container? It would be much better if we could talk to the database over the network."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3677
msgid "The easiest way to do this is to create a pair of connected virtual Ethernet devices (known as @code{veth}).  We move one of the devices (@code{ceth-test}) into the @code{net} namespace of the container and leave the other end (@code{veth-test}) of the connection on the host system."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3683
#, no-wrap
msgid ""
"pid=5983\n"
"ns=\"guix-test\"\n"
"host=\"veth-test\"\n"
"client=\"ceth-test\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3686
#, no-wrap
msgid ""
"# Attach the new net namespace \"guix-test\" to the container PID.\n"
"sudo ip netns attach $ns $pid\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3689
#, no-wrap
msgid ""
"# Create the pair of devices\n"
"sudo ip link add $host type veth peer name $client\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3692
#, no-wrap
msgid ""
"# Move the client device into the container's net namespace\n"
"sudo ip link set $client netns $ns\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3695
msgid "Then we configure the host side:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3699
#, no-wrap
msgid ""
"sudo ip link set $host up\n"
"sudo ip addr add 10.0.0.1/24 dev $host\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3702
msgid "@dots{}and then we configure the client side:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3707
#, no-wrap
msgid ""
"sudo ip netns exec $ns  ip link set lo up\n"
"sudo ip netns exec $ns  ip link set $client up\n"
"sudo ip netns exec $ns  ip addr add 10.0.0.2/24 dev $client\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3713
msgid "At this point the host can reach the container at IP address 10.0.0.2, and the container can reach the host at IP 10.0.0.1.  This is all we need to talk to the database server inside the container from the host system on the outside."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3718
#, no-wrap
msgid ""
"$ psql -h 10.0.0.2 -U test\n"
"psql (14.4)\n"
"Type \"help\" for help.\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3728
#, no-wrap
msgid ""
"test=> CREATE TABLE hello (who TEXT NOT NULL);\n"
"CREATE TABLE\n"
"test=> INSERT INTO hello (who) VALUES ('world');\n"
"INSERT 0 1\n"
"test=> SELECT * FROM hello;\n"
"  who\n"
"-------\n"
" world\n"
"(1 row)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3731
msgid "Now that we're done with this little demonstration let's clean up:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3736
#, no-wrap
msgid ""
"sudo kill $pid\n"
"sudo ip netns del $ns\n"
"sudo ip link del $host\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3745
msgid "Guix can produce disk images (@pxref{Invoking guix system,,, guix, GNU Guix Reference Manual}) that can be used with virtual machines solutions such as virt-manager, GNOME Boxes or the more bare QEMU, among others."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3748
msgid "This chapter aims to provide hands-on, practical examples that relates to the usage and configuration of virtual machines on a Guix System."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3756
#, no-wrap
msgid "Network bridge interface"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3757
#, no-wrap
msgid "networking, bridge"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3758
#, no-wrap
msgid "qemu, network bridge"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3770
msgid "By default, QEMU uses a so-called ``user mode'' host network back-end, which is convenient as it does not require any configuration.  Unfortunately, it is also quite limited.  In this mode, the guest @abbr{VM, virtual machine} can access the network the same way the host would, but it cannot be reached from the host.  Additionally, since the QEMU user networking mode relies on ICMP, ICMP-based networking tools such as @command{ping} do @emph{not} work in this mode.  Thus, it is often desirable to configure a network bridge, which enables the guest to fully participate in the network.  This is necessary, for example, when the guest is to be used as a server."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3771
#, no-wrap
msgid "Creating a network bridge interface"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3777
msgid "There are many ways to create a network bridge.  The following command shows how to use NetworkManager and its @command{nmcli} command line interface (CLI) tool, which should already be available if your operating system declaration is based on one of the desktop templates:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3780
#, no-wrap
msgid "# nmcli con add type bridge con-name br0 ifname br0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3786
msgid "To have this bridge be part of your network, you must associate your network bridge with the Ethernet interface used to connect with the network.  Assuming your interface is named @samp{enp2s0}, the following command can be used to do so:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3789
#, no-wrap
msgid "# nmcli con add type bridge-slave ifname enp2s0 master br0\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:3791 guix-git/doc/guix-cookbook.texi:3833
#, no-wrap
msgid "Important"
msgstr "Важно"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:3795
msgid "Only Ethernet interfaces can be added to a bridge.  For wireless interfaces, consider the routed network approach detailed in @xref{Routed network for libvirt}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3801
msgid "By default, the network bridge will allow your guests to obtain their IP address via DHCP, if available on your local network.  For simplicity, this is what we will use here.  To easily find the guests, they can be configured to advertise their host names via mDNS."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3802
#, no-wrap
msgid "Configuring the QEMU bridge helper script"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3810
msgid "QEMU comes with a helper program to conveniently make use of a network bridge interface as an unprivileged user @pxref{Network options,,, QEMU, QEMU Documentation}.  The binary must be made setuid root for proper operation; this can be achieved by adding it to the @code{privileged-programs} field of your (host) @code{operating-system} definition, as shown below:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3817
#, no-wrap
msgid ""
"(privileged-programs\n"
" (cons (privileged-program\n"
"         (program (file-append qemu \"/libexec/qemu-bridge-helper\"))\n"
"         (setuid? #t))\n"
"       %default-privileged-programs))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3822
msgid "The file @file{/etc/qemu/bridge.conf} must also be made to allow the bridge interface, as the default is to deny all.  Add the following to your list of services to do so:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3825
#, no-wrap
msgid "(extra-special-file \"/etc/qemu/host.conf\" \"allow br0\\n\")\n"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3827
#, no-wrap
msgid "Invoking QEMU with the right command line options"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3832
msgid "When invoking QEMU, the following options should be provided so that the network bridge is used, after having selected a unique MAC address for the guest."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:3837
msgid "By default, a single MAC address is used for all guests, unless provided.  Failing to provide different MAC addresses to each virtual machine making use of the bridge would cause networking issues."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3844
#, no-wrap
msgid ""
"$ qemu-system-x86_64 [...] \\\n"
"    -device virtio-net-pci,netdev=user0,mac=XX:XX:XX:XX:XX:XX \\\n"
"    -netdev bridge,id=user0,br=br0 \\\n"
"    [...]\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3848
msgid "To generate MAC addresses that have the QEMU registered prefix, the following snippet can be employed:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3854
#, no-wrap
msgid ""
"mac_address=\"52:54:00:$(dd if=/dev/urandom bs=512 count=1 2>/dev/null \\\n"
"                           | md5sum \\\n"
"                           | sed -E 's/^(..)(..)(..).*$/\\1:\\2:\\3/')\"\n"
"echo $mac_address\n"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3856
#, no-wrap
msgid "Networking issues caused by Docker"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3863
msgid "If you use Docker on your machine, you may experience connectivity issues when attempting to use a network bridge, which are caused by Docker also relying on network bridges and configuring its own routing rules.  The solution is add the following @code{iptables} snippet to your @code{operating-system} declaration:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3875
#, no-wrap
msgid ""
"(service iptables-service-type\n"
"             (iptables-configuration\n"
"              (ipv4-rules (plain-file \"iptables.rules\" \"\\\n"
"*filter\n"
":INPUT ACCEPT [0:0]\n"
":FORWARD DROP [0:0]\n"
":OUTPUT ACCEPT [0:0]\n"
"-A FORWARD -i br0 -o br0 -j ACCEPT\n"
"COMMIT\n"
"\"))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3879
#, no-wrap
msgid "Virtual network bridge interface"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3880
#, no-wrap
msgid "networking, virtual bridge"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3881
#, no-wrap
msgid "libvirt, virtual network bridge"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3895
msgid "If the machine hosting your virtual machines is connected wirelessly to the network, you won't be able to use a true network bridge as explained in the preceding section (@pxref{Network bridge for QEMU}).  In this case, the next best option is to use a @emph{virtual} bridge with static routing and to configure a libvirt-powered virtual machine to use it (via the @command{virt-manager} GUI for example).  This is similar to the default mode of operation of QEMU/libvirt, except that instead of using @abbr{NAT, Network Address Translation}, it relies on static routes to join the @abbr{VM, virtual machine} IP address to the @abbr{LAN, local area network}.  This provides two-way connectivity to and from the virtual machine, which is needed for exposing services hosted on the virtual machine."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3896
#, no-wrap
msgid "Creating a virtual network bridge"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3906
msgid "A virtual network bridge consists of a few components/configurations, such as a @abbr{TUN, network tunnel} interface, DHCP server (dnsmasq)  and firewall rules (iptables).  The @command{virsh} command, provided by the @code{libvirt} package, makes it very easy to create a virtual bridge.  You first need to choose a network subnet for your virtual bridge; if your home LAN is in the @samp{192.168.1.0/24} network, you could opt to use e.g.@: @samp{192.168.2.0/24}.  Define an XML file, e.g.@: @file{/tmp/virbr0.xml}, containing the following:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3918
#, no-wrap
msgid ""
"<network>\n"
"  <name>virbr0</name>\n"
"  <bridge name=\"virbr0\" />\n"
"  <forward mode=\"route\"/>\n"
"  <ip address=\"192.168.2.0\" netmask=\"255.255.255.0\">\n"
"    <dhcp>\n"
"      <range start=\"192.168.2.1\" end=\"192.168.2.254\"/>\n"
"    </dhcp>\n"
"  </ip>\n"
"</network>\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3922
msgid "Then create and configure the interface using the @command{virsh} command, as root:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3927
#, no-wrap
msgid ""
"virsh net-define /tmp/virbr0.xml\n"
"virsh net-autostart virbr0\n"
"virsh net-start virbr0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3932
msgid "The @samp{virbr0} interface should now be visible e.g.@: via the @samp{ip address} command.  It will be automatically started every time your libvirt virtual machine is started."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3933
#, no-wrap
msgid "Configuring the static routes for your virtual bridge"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3941
msgid "If you configured your virtual machine to use your newly created @samp{virbr0} virtual bridge interface, it should already receive an IP via DHCP such as @samp{192.168.2.15} and be reachable from the server hosting it, e.g.@: via @samp{ping 192.168.2.15}.  There's one last configuration needed so that the VM can reach the external network: adding static routes to the network's router."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3950
msgid "In this example, the LAN network is @samp{192.168.1.0/24} and the router configuration web page may be accessible via e.g.@: the @url{http://192.168.1.1} page.  On a router running the @url{https://librecmc.org/, libreCMC} firmware, you would navigate to the @clicksequence{Network @click{} Static Routes} page (@url{https://192.168.1.1/cgi-bin/luci/admin/network/routes}), and you would add a new entry to the @samp{Static IPv4 Routes} with the following information:"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:3952
#, no-wrap
msgid "Interface"
msgstr "Интерфейс"

#. type: table
#: guix-git/doc/guix-cookbook.texi:3954
msgid "lan"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:3954
#, no-wrap
msgid "Target"
msgstr "Цель"

#. type: table
#: guix-git/doc/guix-cookbook.texi:3956
msgid "192.168.2.0"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:3956
#, no-wrap
msgid "IPv4-Netmask"
msgstr "Маска IPv4"

#. type: table
#: guix-git/doc/guix-cookbook.texi:3958
msgid "255.255.255.0"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:3958
#, no-wrap
msgid "IPv4-Gateway"
msgstr "Шлюз IPv4"

#. type: var{#1}
#: guix-git/doc/guix-cookbook.texi:3960
msgid "server-ip"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:3960
#, no-wrap
msgid "Route type"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:3962
msgid "unicast"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3966
msgid "where @var{server-ip} is the IP address of the machine hosting the VMs, which should be static."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3970
msgid "After saving/applying this new static route, external connectivity should work from within your VM; you can e.g.@: run @samp{ping gnu.org} to verify that it functions correctly."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3980
msgid "Guix is a functional package manager that offers many features beyond what more traditional package managers can do.  To the uninitiated, those features might not have obvious use cases at first.  The purpose of this chapter is to demonstrate some advanced package management concepts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3983
msgid "@pxref{Package Management,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3994
msgid "Guix provides a very useful feature that may be quite foreign to newcomers: @dfn{profiles}.  They are a way to group package installations together and all users on the same system are free to use as many profiles as they want."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3999
msgid "Whether you're a developer or not, you may find that multiple profiles bring you great power and flexibility.  While they shift the paradigm somewhat compared to @emph{traditional package managers}, they are very convenient to use once you've understood how to set them up."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:4004
msgid "This section is an opinionated guide on the use of multiple profiles.  It predates @command{guix shell} and its fast profile cache (@pxref{Invoking guix shell,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:4008
msgid "In many cases, you may find that using @command{guix shell} to set up the environment you need, when you need it, is less work that maintaining a dedicated profile.  Your call!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4015
msgid "If you are familiar with Python's @samp{virtualenv}, you can think of a profile as a kind of universal @samp{virtualenv} that can hold any kind of software whatsoever, not just Python software.  Furthermore, profiles are self-sufficient: they capture all the runtime dependencies which guarantees that all programs within a profile will always work at any point in time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4017
msgid "Multiple profiles have many benefits:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4021
msgid "Clean semantic separation of the various packages a user needs for different contexts."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4025
msgid "Multiple profiles can be made available into the environment either on login or within a dedicated shell."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4029
msgid "Profiles can be loaded on demand.  For instance, the user can use multiple shells, each of them running different profiles."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4034
msgid "Isolation: Programs from one profile will not use programs from the other, and the user can even install different versions of the same programs to the two profiles without conflict."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4038
msgid "Deduplication: Profiles share dependencies that happens to be the exact same.  This makes multiple profiles storage-efficient."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4046
msgid "Reproducible: when used with declarative manifests, a profile can be fully specified by the Guix commit that was active when it was set up.  This means that the exact same profile can be @uref{https://guix.gnu.org/blog/2018/multi-dimensional-transactions-and-rollbacks-oh-my/, set up anywhere and anytime}, with just the commit information.  See the section on @ref{Reproducible profiles}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4050
msgid "Easier upgrades and maintenance: Multiple profiles make it easy to keep package listings at hand and make upgrades completely frictionless."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4053
msgid "Concretely, here follows some typical profiles:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4057
msgid "The dependencies of a project you are working on."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4060
msgid "Your favourite programming language libraries."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4063
msgid "Laptop-specific programs (like @samp{powertop}) that you don't need on a desktop."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4067
msgid "@TeX{}live (this one can be really useful when you need to install just one package for this one document you've just received over email)."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4070
msgid "Games."
msgstr "Игры."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4073
msgid "Let's dive in the set up!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4088
msgid "A Guix profile can be set up @i{via} a @dfn{manifest}.  A manifest is a snippet of Scheme code that specifies the set of packages you want to have in your profile; it looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4098
#, no-wrap
msgid ""
"(specifications->manifest\n"
"  '(\"package-1\"\n"
"    ;; Version 1.3 of package-2.\n"
"    \"package-2@@1.3\"\n"
"    ;; The \"lib\" output of package-3.\n"
"    \"package-3:lib\"\n"
"    ; ...\n"
"    \"package-N\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4102
msgid "@xref{Writing Manifests,,, guix, GNU Guix Reference Manual}, for more information about the syntax."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4104
msgid "We can create a manifest specification per profile and install them this way:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4110
#, no-wrap
msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"mkdir -p \"$GUIX_EXTRA_PROFILES\"/my-project # if it does not exist yet\n"
"guix package --manifest=/path/to/guix-my-project-manifest.scm \\\n"
" --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4114
msgid "Here we set an arbitrary variable @samp{GUIX_EXTRA_PROFILES} to point to the directory where we will store our profiles in the rest of this article."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4120
msgid "Placing all your profiles in a single directory, with each profile getting its own sub-directory, is somewhat cleaner.  This way, each sub-directory will contain all the symlinks for precisely one profile.  Besides, ``looping over profiles'' becomes obvious from any programming language (e.g.@: a shell script) by simply looping over the sub-directories of @samp{$GUIX_EXTRA_PROFILES}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4122
msgid "Note that it's also possible to loop over the output of"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4125
#, no-wrap
msgid "guix package --list-profiles\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4128
msgid "although you'll probably have to filter out @file{~/.config/guix/current}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4130
msgid "To enable all profiles on login, add this to your @file{~/.bash_profile} (or similar):"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4140
#, no-wrap
msgid ""
"for i in $GUIX_EXTRA_PROFILES/*; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4145
msgid "Note to Guix System users: the above reflects how your default profile @file{~/.guix-profile} is activated from @file{/etc/profile}, that latter being loaded by @file{~/.bashrc} by default."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4147
msgid "You can obviously choose to only enable a subset of them:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4157
#, no-wrap
msgid ""
"for i in \"$GUIX_EXTRA_PROFILES\"/my-project-1 \"$GUIX_EXTRA_PROFILES\"/my-project-2; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4161
msgid "When a profile is off, it's straightforward to enable it for an individual shell without \"polluting\" the rest of the user session:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4164
#, no-wrap
msgid "GUIX_PROFILE=\"path/to/my-project\" ; . \"$GUIX_PROFILE\"/etc/profile\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4171
msgid "The key to enabling a profile is to @emph{source} its @samp{etc/profile} file.  This file contains shell code that exports the right environment variables necessary to activate the software contained in the profile.  It is built automatically by Guix and meant to be sourced.  It contains the same variables you would get if you ran:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4174
#, no-wrap
msgid "guix package --search-paths=prefix --profile=$my_profile\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4178
msgid "Once again, see @ref{Invoking guix package,,, guix, GNU Guix Reference Manual} for the command line options."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4180
msgid "To upgrade a profile, simply install the manifest again:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4184
#, no-wrap
msgid ""
"guix package -m /path/to/guix-my-project-manifest.scm \\\n"
" -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4190
msgid "To upgrade all profiles, it's easy enough to loop over them.  For instance, assuming your manifest specifications are stored in @file{~/.guix-manifests/guix-$profile-manifest.scm}, with @samp{$profile} being the name of the profile (e.g.@: \"project1\"), you could do the following in Bourne shell:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4196
#, no-wrap
msgid ""
"for profile in \"$GUIX_EXTRA_PROFILES\"/*; do\n"
"  guix package --profile=\"$profile\" \\\n"
"   --manifest=\"$HOME/.guix-manifests/guix-$profile-manifest.scm\"\n"
"done\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4199
msgid "Each profile has its own generations:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4202
#, no-wrap
msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --list-generations\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4205
msgid "You can roll-back to any generation of a given profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4208
#, no-wrap
msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --switch-generations=17\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4212
msgid "Finally, if you want to switch to a profile without inheriting from the current environment, you can activate it from an empty shell:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4216
#, no-wrap
msgid ""
"env -i $(which bash) --login --noprofile --norc\n"
". my-project/etc/profile\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4224
msgid "Activating a profile essentially boils down to exporting a bunch of environmental variables.  This is the role of the @samp{etc/profile} within the profile."
msgstr ""

#. type: emph{#1}
#: guix-git/doc/guix-cookbook.texi:4227
msgid "Note: Only the environmental variables of the packages that consume them will be set."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4231
msgid "For instance, @samp{MANPATH} won't be set if there is no consumer application for man pages within the profile.  So if you need to transparently access man pages once the profile is loaded, you've got two options:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4235
msgid "Either export the variable manually, e.g."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4237
#, no-wrap
msgid "export MANPATH=/path/to/profile$@{MANPATH:+:@}$MANPATH\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4241
msgid "Or include @samp{man-db} to the profile manifest."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4245
msgid "The same is true for @samp{INFOPATH} (you can install @samp{info-reader}), @samp{PKG_CONFIG_PATH} (install @samp{pkg-config}), etc."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4250
msgid "What about the default profile that Guix keeps in @file{~/.guix-profile}?"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4253
msgid "You can assign it the role you want.  Typically you would install the manifest of the packages you want to use all the time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4257
msgid "Alternatively, you could keep it ``manifest-less'' for throw-away packages that you would just use for a couple of days.  This way makes it convenient to run"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4261
#, no-wrap
msgid ""
"guix install package-foo\n"
"guix upgrade package-bar\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4264
msgid "without having to specify the path to a profile."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4272
msgid "Manifests let you @dfn{declare} the set of packages you'd like to have in a profile (@pxref{Writing Manifests,,, guix, GNU Guix Reference Manual}).  They are a convenient way to keep your package lists around and, say, to synchronize them across multiple machines using a version control system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4276
msgid "A common complaint about manifests is that they can be slow to install when they contain large number of packages.  This is especially cumbersome when you just want get an upgrade for one package within a big manifest."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4281
msgid "This is one more reason to use multiple profiles, which happen to be just perfect to break down manifests into multiple sets of semantically connected packages.  Using multiple, small profiles provides more flexibility and usability."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4283
msgid "Manifests come with multiple benefits.  In particular, they ease maintenance:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4291
msgid "When a profile is set up from a manifest, the manifest itself is self-sufficient to keep a ``package listing'' around and reinstall the profile later or on a different system.  For ad-hoc profiles, we would need to generate a manifest specification manually and maintain the package versions for the packages that don't use the default version."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4296
msgid "@code{guix package --upgrade} always tries to update the packages that have propagated inputs, even if there is nothing to do.  Guix manifests remove this problem."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4302
msgid "When partially upgrading a profile, conflicts may arise (due to diverging dependencies between the updated and the non-updated packages) and they can be annoying to resolve manually.  Manifests remove this problem altogether since all packages are always upgraded at once."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4308
msgid "As mentioned above, manifests allow for reproducible profiles, while the imperative @code{guix install}, @code{guix upgrade}, etc. do not, since they produce different profiles every time even when they hold the same packages.  See @uref{https://issues.guix.gnu.org/issue/33285, the related discussion on the matter}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4316
msgid "Manifest specifications are usable by other @samp{guix} commands.  For example, you can run @code{guix weather -m manifest.scm} to see how many substitutes are available, which can help you decide whether you want to try upgrading today or wait a while.  Another example: you can run @code{guix pack -m manifest.scm} to create a pack containing all the packages in the manifest (and their transitive references)."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4320
msgid "Finally, manifests have a Scheme representation, the @samp{<manifest>} record type.  They can be manipulated in Scheme and passed to the various Guix @uref{https://en.wikipedia.org/wiki/Api, APIs}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4331
msgid "It's important to understand that while manifests can be used to declare profiles, they are not strictly equivalent: profiles have the side effect that they ``pin'' packages in the store, which prevents them from being garbage-collected (@pxref{Invoking guix gc,,, guix, GNU Guix Reference Manual})  and ensures that they will still be available at any point in the future.  The @command{guix shell} command also protects recently-used profiles from garbage collection; profiles that have not been used for a while may be garbage-collected though, along with the packages they refer to."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4336
msgid "To be 100% sure that a given profile will never be collected, install the manifest to a profile and use @code{GUIX_PROFILE=/the/profile; . \"$GUIX_PROFILE\"/etc/profile} as explained above: this guarantees that our hacking environment will be available at all times."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4339
msgid "@emph{Security warning:} While keeping old profiles around can be convenient, keep in mind that outdated packages may not have received the latest security fixes."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4344
msgid "To reproduce a profile bit-for-bit, we need two pieces of information:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4348
msgid "a manifest (@pxref{Writing Manifests,,, guix, GNU Guix Reference Manual});"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4351
msgid "a Guix channel specification (@pxref{Replicating Guix,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4355
msgid "Indeed, manifests alone might not be enough: different Guix versions (or different channels) can produce different outputs for a given manifest."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4360
msgid "You can output the Guix channel specification with @samp{guix describe --format=channels} (@pxref{Invoking guix describe,,, guix, GNU Guix Reference Manual}).  Save this to a file, say @samp{channel-specs.scm}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4363
msgid "On another computer, you can use the channel specification file and the manifest to reproduce the exact same profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4367
#, no-wrap
msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"GUIX_EXTRA=$HOME/.guix-extra\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4370
#, no-wrap
msgid ""
"mkdir -p \"$GUIX_EXTRA\"/my-project\n"
"guix pull --channels=channel-specs.scm --profile=\"$GUIX_EXTRA/my-project/guix\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4375
#, no-wrap
msgid ""
"mkdir -p \"$GUIX_EXTRA_PROFILES/my-project\"\n"
"\"$GUIX_EXTRA\"/my-project/guix/bin/guix package \\\n"
" --manifest=/path/to/guix-my-project-manifest.scm \\\n"
" --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4379
msgid "It's safe to delete the Guix channel profile you've just installed with the channel specification, the project profile does not depend on it."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:4383
#, no-wrap
msgid "development, with Guix"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:4384
#, no-wrap
msgid "software development, with Guix"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4394
msgid "Guix is a handy tool for developers; @command{guix shell}, in particular, gives a standalone development environment for your package, no matter what language(s) it's written in (@pxref{Invoking guix shell,,, guix, GNU Guix Reference Manual}).  To benefit from it, you have to initially write a package definition and have it either in Guix proper, or in a channel, or directly in your project's source tree as a @file{guix.scm} file.  This last option is appealing: all developers have to do to get set up is clone the project's repository and run @command{guix shell}, with no arguments."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4404
msgid "Development needs go beyond development environments though.  How can developers perform continuous integration of their code in Guix build environments? How can they deliver their code straight to adventurous users? This chapter describes a set of files developers can add to their repository to set up Guix-based development environments, continuous integration, and continuous delivery---all at once@footnote{This chapter is adapted from a @uref{https://guix.gnu.org/en/blog/2023/from-development-environments-to-continuous-integrationthe-ultimate-guide-to-software-development-with-guix/, blog post} published in June 2023 on the Guix web site.}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4427
msgid "How do we go about ``Guixifying'' a repository? The first step, as we've seen, will be to add a @file{guix.scm} at the root of the repository in question. We'll take @uref{https://www.gnu.org/software/guile,Guile} as an example in this chapter: it's written in Scheme (mostly) and C, and has a number of dependencies---a C compilation tool chain, C libraries, Autoconf and its friends, LaTeX, and so on. The resulting @file{guix.scm} looks like the usual package definition (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}), just without the @code{define-public} bit:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4430
#, no-wrap
msgid ""
";; The ‘guix.scm’ file for Guile, for use by ‘guix shell’.\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4451
#, no-wrap
msgid ""
"(use-modules (guix)\n"
"             (guix build-system gnu)\n"
"             ((guix licenses) #:prefix license:)\n"
"             (gnu packages autotools)\n"
"             (gnu packages base)\n"
"             (gnu packages bash)\n"
"             (gnu packages bdw-gc)\n"
"             (gnu packages compression)\n"
"             (gnu packages flex)\n"
"             (gnu packages gdb)\n"
"             (gnu packages gettext)\n"
"             (gnu packages gperf)\n"
"             (gnu packages libffi)\n"
"             (gnu packages libunistring)\n"
"             (gnu packages linux)\n"
"             (gnu packages pkg-config)\n"
"             (gnu packages readline)\n"
"             (gnu packages tex)\n"
"             (gnu packages texinfo)\n"
"             (gnu packages version-control))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4473
#, no-wrap
msgid ""
"(package\n"
"  (name \"guile\")\n"
"  (version \"3.0.99-git\")                          ;funky version number\n"
"  (source #f)                                     ;no source\n"
"  (build-system gnu-build-system)\n"
"  (native-inputs\n"
"   (append (list autoconf\n"
"                 automake\n"
"                 libtool\n"
"                 gnu-gettext\n"
"                 flex\n"
"                 texinfo\n"
"                 texlive-base                 ;for \"make pdf\"\n"
"                 texlive-epsf\n"
"                 gperf\n"
"                 git\n"
"                 gdb\n"
"                 strace\n"
"                 readline\n"
"                 lzip\n"
"                 pkg-config)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4483
#, no-wrap
msgid ""
"           ;; When cross-compiling, a native version of Guile itself is\n"
"           ;; needed.\n"
"           (if (%current-target-system)\n"
"               (list this-package)\n"
"               '())))\n"
"  (inputs\n"
"   (list libffi bash-minimal))\n"
"  (propagated-inputs\n"
"   (list libunistring libgc))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4497
#, no-wrap
msgid ""
"  (native-search-paths\n"
"   (list (search-path-specification\n"
"          (variable \"GUILE_LOAD_PATH\")\n"
"          (files '(\"share/guile/site/3.0\")))\n"
"         (search-path-specification\n"
"          (variable \"GUILE_LOAD_COMPILED_PATH\")\n"
"          (files '(\"lib/guile/3.0/site-ccache\")))))\n"
"  (synopsis \"Scheme implementation intended especially for extensions\")\n"
"  (description\n"
"   \"Guile is the GNU Ubiquitous Intelligent Language for Extensions,\n"
"and it's actually a full-blown Scheme implementation!\")\n"
"  (home-page \"https://www.gnu.org/software/guile/\")\n"
"  (license license:lgpl3+))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4501
msgid "Quite a bit of boilerplate, but now someone who'd like to hack on Guile now only needs to run:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4504
#, no-wrap
msgid "guix shell\n"
msgstr "guix shell\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4510
msgid "That gives them a shell containing all the dependencies of Guile: those listed above, but also @emph{implicit dependencies} such as the GCC tool chain, GNU@ Make, sed, grep, and so on.  @xref{Invoking guix shell,,, guix, GNU Guix Reference Manual}, for more info on @command{guix shell}."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:4511
#, no-wrap
msgid "The chef's recommendation"
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:4513
msgid "Our suggestion is to create development environments like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4516
#, no-wrap
msgid "guix shell --container --link-profile\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:4520
msgid "... or, for short:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4523
#, no-wrap
msgid "guix shell -CP\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:4533
msgid "That gives a shell in an isolated container, and all the dependencies show up in @code{$HOME/.guix-profile}, which plays well with caches such as @file{config.cache} (@pxref{Cache Files,,, autoconf, Autoconf}) and absolute file names recorded in generated @code{Makefile}s and the likes. The fact that the shell runs in a container brings peace of mind: nothing but the current directory and Guile's dependencies is visible inside the container; nothing from the system can possibly interfere with your development."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:4536
#, no-wrap
msgid "Level 1: Building with Guix"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4543
msgid "Now that we have a package definition (@pxref{Getting Started}), why not also take advantage of it so we can build Guile with Guix? We had left the @code{source} field empty, because @command{guix shell} above only cares about the @emph{inputs} of our package---so it can set up the development environment---not about the package itself."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4546
msgid "To build the package with Guix, we'll need to fill out the @code{source} field, along these lines:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4551
#, no-wrap
msgid ""
"(use-modules (guix)\n"
"             (guix git-download)  ;for ‘git-predicate’\n"
"             @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4556
#, no-wrap
msgid ""
"(define vcs-file?\n"
"  ;; Return true if the given file is under version control.\n"
"  (or (git-predicate (current-source-directory))\n"
"      (const #t)))                                ;not in a Git checkout\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4564
#, no-wrap
msgid ""
"(package\n"
"  (name \"guile\")\n"
"  (version \"3.0.99-git\")                          ;funky version number\n"
"  (source (local-file \".\" \"guile-checkout\"\n"
"                      #:recursive? #t\n"
"                      #:select? vcs-file?))\n"
"  @dots{})\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4567
msgid "Here's what we changed compared to the previous section:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:4572
msgid "We added @code{(guix git-download)} to our set of imported modules, so we can use its @code{git-predicate} procedure."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:4576
msgid "We defined @code{vcs-file?} as a procedure that returns true when passed a file that is under version control. For good measure, we add a fallback case for when we're not in a Git checkout: always return true."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:4581
msgid "We set @code{source} to a @uref{https://guix.gnu.org/manual/devel/en/html_node/G_002dExpressions.html#index-local_002dfile,@code{local-file}}---a recursive copy of the current directory (@code{\".\"}), limited to files under version control (the @code{#:select?} bit)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4588
msgid "From there on, our @file{guix.scm} file serves a second purpose: it lets us build the software with Guix. The whole point of building with Guix is that it's a ``clean'' build---you can be sure nothing from your working tree or system interferes with the build result---and it lets you test a variety of things. First, you can do a plain native build:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4591
#, no-wrap
msgid "guix build -f guix.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4598
msgid "But you can also build for another system (possibly after setting up @pxref{Daemon Offload Setup, offloading,, guix, GNU Guix Reference Manual} or @pxref{Virtualization Services, transparent emulation,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4601
#, no-wrap
msgid "guix build -f guix.scm -s aarch64-linux -s riscv64-linux\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4605
msgid "@dots{} or cross-compile:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4608
#, no-wrap
msgid "guix build -f guix.scm --target=x86_64-w64-mingw32\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4612
msgid "You can also use @dfn{package transformations} to test package variants (@pxref{Package Transformation Options,,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4617
#, no-wrap
msgid ""
"# What if we built with Clang instead of GCC?\n"
"guix build -f guix.scm \\\n"
"  --with-c-toolchain=guile@@3.0.99-git=clang-toolchain\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4621
#, no-wrap
msgid ""
"# What about that under-tested configure flag?\n"
"guix build -f guix.scm \\\n"
"  --with-configure-flag=guile@@3.0.99-git=--disable-networking\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4624
msgid "Handy!"
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:4626
#, no-wrap
msgid "Level 2: The Repository as a Channel"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4633
msgid "We now have a Git repository containing (among other things) a package definition (@pxref{Building with Guix}).  Can't we turn it into a @dfn{channel} (@pxref{Channels,,, guix, GNU Guix Reference Manual})? After all, channels are designed to ship package definitions to users, and that's exactly what we're doing with our @file{guix.scm}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4640
msgid "Turns out we can indeed turn it into a channel, but with one caveat: we must create a separate directory for the @code{.scm} file(s) of our channel so that @command{guix pull} doesn't load unrelated @code{.scm} files when someone pulls the channel---and in Guile, there are lots of them! So we'll start like this, keeping a top-level @file{guix.scm} symlink for the sake of @command{guix shell}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4645
#, no-wrap
msgid ""
"mkdir -p .guix/modules\n"
"mv guix.scm .guix/modules/guile-package.scm\n"
"ln -s .guix/modules/guile-package.scm guix.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4656
msgid "To make it usable as part of a channel, we need to turn our @file{guix.scm} file into a @dfn{package module} (@pxref{Package Modules,,, guix, GNU Guix Reference Manual}): we do that by changing the @code{use-modules} form at the top to a @code{define-module} form. We also need to actually @emph{export} a package variable, with @code{define-public}, while still returning the package value at the end of the file so we can still use @command{guix shell} and @command{guix build -f guix.scm}. The end result looks like this (not repeating things that haven't changed):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4662
#, no-wrap
msgid ""
"(define-module (guile-package)\n"
"  #:use-module (guix)\n"
"  #:use-module (guix git-download)   ;for ‘git-predicate’\n"
"  @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4667
#, no-wrap
msgid ""
"(define vcs-file?\n"
"  ;; Return true if the given file is under version control.\n"
"  (or (git-predicate (dirname (dirname (current-source-directory))))\n"
"      (const #t)))                                ;not in a Git checkout\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4676
#, no-wrap
msgid ""
"(define-public guile\n"
"  (package\n"
"    (name \"guile\")\n"
"    (version \"3.0.99-git\")                          ;funky version number\n"
"    (source (local-file \"../..\" \"guile-checkout\"\n"
"                        #:recursive? #t\n"
"                        #:select? vcs-file?))\n"
"    @dots{}))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4679
#, no-wrap
msgid ""
";; Return the package object define above at the end of the module.\n"
"guile\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4684
msgid "We need one last thing: a @uref{https://guix.gnu.org/manual/devel/en/html_node/Package-Modules-in-a-Sub_002ddirectory.html,@code{.guix-channel} file} so Guix knows where to look for package modules in our repository:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4687
#, no-wrap
msgid ""
";; This file lets us present this repo as a Guix channel.\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4691
#, no-wrap
msgid ""
"(channel\n"
"  (version 0)\n"
"  (directory \".guix/modules\"))  ;look for package modules under .guix/modules/\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4694
msgid "To recap, we now have these files:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4702
#, no-wrap
msgid ""
".\n"
"├── .guix-channel\n"
"├── guix.scm → .guix/modules/guile-package.scm\n"
"└── .guix\n"
"    └── modules\n"
"       └── guile-package.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4711
msgid "And that's it: we have a channel! (We could do better and support @uref{https://guix.gnu.org/manual/devel/en/html_node/Specifying-Channel-Authorizations.html,@emph{channel authentication}} so users know they're pulling genuine code. We'll spare you the details here but it's worth considering!) Users can pull from this channel by @uref{https://guix.gnu.org/manual/devel/en/html_node/Specifying-Additional-Channels.html,adding it to @code{~/.config/guix/channels.scm}}, along these lines:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4718
#, no-wrap
msgid ""
"(append (list (channel\n"
"                (name 'guile)\n"
"                (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                (branch \"main\")))\n"
"        %default-channels)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4721
msgid "After running @command{guix pull}, we can see the new package:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4743
#, no-wrap
msgid ""
"$ guix describe\n"
"Generation 264  May 26 2023 16:00:35    (current)\n"
"  guile 36fd2b4\n"
"    repository URL: https://git.savannah.gnu.org/git/guile.git\n"
"    branch: main\n"
"    commit: 36fd2b4920ae926c79b936c29e739e71a6dff2bc\n"
"  guix c5bc698\n"
"    repository URL: https://git.savannah.gnu.org/git/guix.git\n"
"    commit: c5bc698e8922d78ed85989985cc2ceb034de2f23\n"
"$ guix package -A ^guile$\n"
"guile   3.0.99-git      out,debug       guile-package.scm:51:4\n"
"guile   3.0.9           out,debug       gnu/packages/guile.scm:317:2\n"
"guile   2.2.7           out,debug       gnu/packages/guile.scm:258:2\n"
"guile   2.2.4           out,debug       gnu/packages/guile.scm:304:2\n"
"guile   2.0.14          out,debug       gnu/packages/guile.scm:148:2\n"
"guile   1.8.8           out             gnu/packages/guile.scm:77:2\n"
"$ guix build guile@@3.0.99-git\n"
"[@dots{}]\n"
"/gnu/store/axnzbl89yz7ld78bmx72vpqp802dwsar-guile-3.0.99-git-debug\n"
"/gnu/store/r34gsij7f0glg2fbakcmmk0zn4v62s5w-guile-3.0.99-git\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4748
msgid "That's how, as a developer, you get your software delivered directly into the hands of users! No intermediaries, yet no loss of transparency and provenance tracking."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4752
msgid "With that in place, it also becomes trivial for anyone to create Docker images, Deb/RPM packages, or a plain tarball with @command{guix pack} (@pxref{Invoking guix pack,,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4756
#, no-wrap
msgid ""
"# How about a Docker image of our Guile snapshot?\n"
"guix pack -f docker -S /bin=bin guile@@3.0.99-git\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4759
#, no-wrap
msgid ""
"# And a relocatable RPM?\n"
"guix pack -f rpm -R -S /bin=bin guile@@3.0.99-git\n"
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:4762
#, no-wrap
msgid "Bonus: Package Variants"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4770
msgid "We now have an actual channel, but it contains only one package (@pxref{The Repository as a Channel}).  While we're at it, we can define @dfn{package variants} (@pxref{Defining Package Variants,,, guix, GNU Guix Reference Manual}) in our @file{guile-package.scm} file, variants that we want to be able to test as Guile developers---similar to what we did above with transformation options. We can add them like so:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4773
#, no-wrap
msgid ""
";; This is the ‘.guix/modules/guile-package.scm’ file.\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4776
#, no-wrap
msgid ""
"(define-module (guile-package)\n"
"  @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4779
#, no-wrap
msgid ""
"(define-public guile\n"
"  @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4787
#, no-wrap
msgid ""
"(define (package-with-configure-flags p flags)\n"
"  \"Return P with FLAGS as additional 'configure' flags.\"\n"
"  (package/inherit p\n"
"    (arguments\n"
"     (substitute-keyword-arguments (package-arguments p)\n"
"       ((#:configure-flags original-flags #~(list))\n"
"        #~(append #$original-flags #$flags))))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4793
#, no-wrap
msgid ""
"(define-public guile-without-threads\n"
"  (package\n"
"    (inherit (package-with-configure-flags guile\n"
"                                           #~(list \"--without-threads\")))\n"
"    (name \"guile-without-threads\")))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4799
#, no-wrap
msgid ""
"(define-public guile-without-networking\n"
"  (package\n"
"    (inherit (package-with-configure-flags guile\n"
"                                           #~(list \"--disable-networking\")))\n"
"    (name \"guile-without-networking\")))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4803
#, no-wrap
msgid ""
";; Return the package object defined above at the end of the module.\n"
"guile\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4808
msgid "We can build these variants as regular packages once we've pulled the channel. Alternatively, from a checkout of Guile, we can run a command like this one from the top level:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4811
#, no-wrap
msgid "guix build -L $PWD/.guix/modules guile-without-threads\n"
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:4814
#, no-wrap
msgid "Level 3: Setting Up Continuous Integration"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:4816
#, no-wrap
msgid "continuous integration (CI)"
msgstr "непрерывная интеграция"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4821
msgid "The channel we defined above (@pxref{The Repository as a Channel})  becomes even more interesting once we set up @uref{https://en.wikipedia.org/wiki/Continuous_integration, @dfn{continuous integration}} (CI). There are several ways to do that."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4827
msgid "You can use one of the mainstream continuous integration tools, such as GitLab-CI. To do that, you need to make sure you run jobs in a Docker image or virtual machine that has Guix installed. If we were to do that in the case of Guile, we'd have a job that runs a shell command like this one:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4830
#, no-wrap
msgid "guix build -L $PWD/.guix/modules guile@@3.0.99-git\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4834
msgid "Doing this works great and has the advantage of being easy to achieve on your favorite CI platform."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4843
msgid "That said, you'll really get the most of it by using @uref{https://guix.gnu.org/en/cuirass,Cuirass}, a CI tool designed for and tightly integrated with Guix. Using it is more work than using a hosted CI tool because you first need to set it up, but that setup phase is greatly simplified if you use its Guix System service (@pxref{Continuous Integration,,, guix, GNU Guix Reference Manual}).  Going back to our example, we give Cuirass a spec file that goes like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4855
#, no-wrap
msgid ""
";; Cuirass spec file to build all the packages of the ‘guile’ channel.\n"
"(list (specification\n"
"        (name \"guile\")\n"
"        (build '(channels guile))\n"
"        (channels\n"
"         (append (list (channel\n"
"                         (name 'guile)\n"
"                         (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                         (branch \"main\")))\n"
"                 %default-channels))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4858
msgid "It differs from what you'd do with other CI tools in two important ways:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4867
msgid "Cuirass knows it's tracking @emph{two} channels, @code{guile} and @code{guix}. Indeed, our own @code{guile} package depends on many packages provided by the @code{guix} channel---GCC, the GNU libc, libffi, and so on. Changes to packages from the @code{guix} channel can potentially influence our @code{guile} build and this is something we'd like to see as soon as possible as Guile developers."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4872
msgid "Build results are not thrown away: they can be distributed as @dfn{substitutes} so that users of our @code{guile} channel transparently get pre-built binaries! (@pxref{Substitutes,,, guix, GNU Guix Reference Manual}, for background info on substitutes.)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4880
msgid "From a developer's viewpoint, the end result is this @uref{https://ci.guix.gnu.org/jobset/guile,status page} listing @emph{evaluations}: each evaluation is a combination of commits of the @code{guix} and @code{guile} channels providing a number of @emph{jobs}---one job per package defined in @file{guile-package.scm} times the number of target architectures."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4887
msgid "As for substitutes, they come for free! As an example, since our @code{guile} jobset is built on ci.guix.gnu.org, which runs @command{guix publish} (@pxref{Invoking guix publish,,, guix, GNU Guix Reference Manual}) in addition to Cuirass, one automatically gets substitutes for @code{guile} builds from ci.guix.gnu.org; no additional work is needed for that."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:4889
#, no-wrap
msgid "Bonus: Build manifest"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4896
msgid "The Cuirass spec above is convenient: it builds every package in our channel, which includes a few variants (@pxref{Setting Up Continuous Integration}).  However, this might be insufficiently expressive in some cases: one might want specific cross-compilation jobs, transformations, Docker images, RPM/Deb packages, or even system tests."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4901
msgid "To achieve that, you can write a @dfn{manifest} (@pxref{Writing Manifests,,, guix, GNU Guix Reference Manual}).  The one we have for Guile has entries for the package variants we defined above, as well as additional variants and cross builds:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4904
#, no-wrap
msgid ""
";; This is ‘.guix/manifest.scm’.\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4908
#, no-wrap
msgid ""
"(use-modules (guix)\n"
"             (guix profiles)\n"
"             (guile-package))   ;import our own package module\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4922
#, no-wrap
msgid ""
"(define* (package->manifest-entry* package system\n"
"                                   #:key target)\n"
"  \"Return a manifest entry for PACKAGE on SYSTEM, optionally cross-compiled to\n"
"TARGET.\"\n"
"  (manifest-entry\n"
"    (inherit (package->manifest-entry package))\n"
"    (name (string-append (package-name package) \".\" system\n"
"                         (if target\n"
"                             (string-append \".\" target)\n"
"                             \"\")))\n"
"    (item (with-parameters ((%current-system system)\n"
"                            (%current-target-system target))\n"
"            package))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4927
#, no-wrap
msgid ""
"(define native-builds\n"
"  (manifest\n"
"   (append (map (lambda (system)\n"
"                  (package->manifest-entry* guile system))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4944
#, no-wrap
msgid ""
"                '(\"x86_64-linux\" \"i686-linux\"\n"
"                  \"aarch64-linux\" \"armhf-linux\"\n"
"                  \"powerpc64le-linux\"))\n"
"           (map (lambda (guile)\n"
"                  (package->manifest-entry* guile \"x86_64-linux\"))\n"
"                (cons (package\n"
"                        (inherit (package-with-c-toolchain\n"
"                                  guile\n"
"                                  `((\"clang-toolchain\"\n"
"                                     ,(specification->package\n"
"                                       \"clang-toolchain\")))))\n"
"                        (name \"guile-clang\"))\n"
"                      (list guile-without-threads\n"
"                            guile-without-networking\n"
"                            guile-debug\n"
"                            guile-strict-typing))))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4955
#, no-wrap
msgid ""
"(define cross-builds\n"
"  (manifest\n"
"   (map (lambda (target)\n"
"          (package->manifest-entry* guile \"x86_64-linux\"\n"
"                                    #:target target))\n"
"        '(\"i586-pc-gnu\"\n"
"          \"aarch64-linux-gnu\"\n"
"          \"riscv64-linux-gnu\"\n"
"          \"i686-w64-mingw32\"\n"
"          \"x86_64-linux-gnu\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4957
#, no-wrap
msgid "(concatenate-manifests (list native-builds cross-builds))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4963
msgid "We won't go into the details of this manifest; suffice to say that it provides additional flexibility. We now need to tell Cuirass to build this manifest, which is done with a spec slightly different from the previous one:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:4975
#, no-wrap
msgid ""
";; Cuirass spec file to build all the packages of the ‘guile’ channel.\n"
"(list (specification\n"
"        (name \"guile\")\n"
"        (build '(manifest \".guix/manifest.scm\"))\n"
"        (channels\n"
"         (append (list (channel\n"
"                         (name 'guile)\n"
"                         (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                         (branch \"main\")))\n"
"                 %default-channels))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4980
msgid "We changed the @code{(build @dots{})} part of the spec to @code{'(manifest \".guix/manifest.scm\")} so that it would pick our manifest, and that's it!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4986
msgid "We picked Guile as the running example in this chapter and you can see the result here:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4990
msgid "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix-channel?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix-channel}};"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4993
msgid "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix/modules/guile-package.scm?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix/modules/guile-package.scm}} with the top-level @file{guix.scm} symlink;"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:4995
msgid "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix/manifest.scm?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix/manifest.scm}}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5004
msgid "These days, repositories are commonly peppered with dot files for various tools: @code{.envrc}, @code{.gitlab-ci.yml}, @code{.github/workflows}, @code{Dockerfile}, @code{.buildpacks}, @code{Aptfile}, @code{requirements.txt}, and whatnot. It may sound like we're proposing a bunch of @emph{additional} files, but in fact those files are expressive enough to @emph{supersede} most or all of those listed above."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5006
msgid "With a couple of files, we get support for:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:5010
msgid "development environments (@command{guix shell});"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:5013
msgid "pristine test builds, including for package variants and for cross-compilation (@command{guix build});"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:5015
msgid "continuous integration (with Cuirass or with some other tool);"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:5018
msgid "continuous delivery to users (@emph{via} the channel and with pre-built binaries);"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:5021
msgid "generation of derivative build artifacts such as Docker images or Deb/RPM packages (@command{guix pack})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5026
msgid "This a nice (in our view!) unified tool set for reproducible software deployment, and an illustration of how you as a developer can benefit from it!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5034
msgid "Guix provides multiple tools to manage environment.  This chapter demonstrate such utilities."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5045
msgid "Guix provides a @samp{direnv} package, which could extend shell after directory change.  This tool could be used to prepare a pure Guix environment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5051
msgid "The following example provides a shell function for @file{~/.direnvrc} file, which could be used from Guix Git repository in @file{~/src/guix/.envrc} file to setup a build environment similar to described in @pxref{Building from Git,,, guix, GNU Guix Reference Manual}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5053
msgid "Create a @file{~/.direnvrc} with a Bash code:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5071
#, no-wrap
msgid ""
"# Thanks <https://github.com/direnv/direnv/issues/73#issuecomment-152284914>\n"
"export_function()\n"
"@{\n"
"  local name=$1\n"
"  local alias_dir=$PWD/.direnv/aliases\n"
"  mkdir -p \"$alias_dir\"\n"
"  PATH_add \"$alias_dir\"\n"
"  local target=\"$alias_dir/$name\"\n"
"  if declare -f \"$name\" >/dev/null; then\n"
"    echo \"#!$SHELL\" > \"$target\"\n"
"    declare -f \"$name\" >> \"$target\" 2>/dev/null\n"
"    # Notice that we add shell variables to the function trigger.\n"
"    echo \"$name \\$*\" >> \"$target\"\n"
"    chmod +x \"$target\"\n"
"  fi\n"
"@}\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5076
#, no-wrap
msgid ""
"use_guix()\n"
"@{\n"
"    # Set GitHub token.\n"
"    export GUIX_GITHUB_TOKEN=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5079
#, no-wrap
msgid ""
"    # Unset 'GUIX_PACKAGE_PATH'.\n"
"    export GUIX_PACKAGE_PATH=\"\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5088
#, no-wrap
msgid ""
"    # Recreate a garbage collector root.\n"
"    gcroots=\"$HOME/.config/guix/gcroots\"\n"
"    mkdir -p \"$gcroots\"\n"
"    gcroot=\"$gcroots/guix\"\n"
"    if [ -L \"$gcroot\" ]\n"
"    then\n"
"        rm -v \"$gcroot\"\n"
"    fi\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5103
#, no-wrap
msgid ""
"    # Miscellaneous packages.\n"
"    PACKAGES_MAINTENANCE=(\n"
"        direnv\n"
"        git\n"
"        git:send-email\n"
"        git-cal\n"
"        gnupg\n"
"        guile-colorized\n"
"        guile-readline\n"
"        less\n"
"        ncurses\n"
"        openssh\n"
"        xdot\n"
"    )\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5106
#, no-wrap
msgid ""
"    # Environment packages.\n"
"    PACKAGES=(help2man guile-sqlite3 guile-gcrypt)\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5110
#, no-wrap
msgid ""
"    # Thanks <https://lists.gnu.org/archive/html/guix-devel/2016-09/msg00859.html>\n"
"    eval \"$(guix shell --search-paths --root=\"$gcroot\" --pure \\\n"
"     --development guix $@{PACKAGES[@@]@} $@{PACKAGES_MAINTENANCE[@@]@} \"$@@\")\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5117
#, no-wrap
msgid ""
"    # Predefine configure flags.\n"
"    configure()\n"
"    @{\n"
"        ./configure\n"
"    @}\n"
"    export_function configure\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5128
#, no-wrap
msgid ""
"    # Run make and optionally build something.\n"
"    build()\n"
"    @{\n"
"        make -j 2\n"
"        if [ $# -gt 0 ]\n"
"        then\n"
"            ./pre-inst-env guix build \"$@@\"\n"
"        fi\n"
"    @}\n"
"    export_function build\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5135
#, no-wrap
msgid ""
"    # Predefine push Git command.\n"
"    push()\n"
"    @{\n"
"        git push --set-upstream origin\n"
"    @}\n"
"    export_function push\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5138
#, no-wrap
msgid ""
"    clear                        # Clean up the screen.\n"
"    git-cal --author='Your Name' # Show contributions calendar.\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5146
#, no-wrap
msgid ""
"    # Show commands help.\n"
"    echo \"\n"
"build          build a package or just a project if no argument provided\n"
"configure      run ./configure with predefined parameters\n"
"push           push to upstream Git repository\n"
"\"\n"
"@}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5150
msgid "Every project containing @file{.envrc} with a string @code{use guix} will have predefined environment variables and procedures."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5152
msgid "Run @command{direnv allow} to setup the environment for the first time."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:5158
#, fuzzy, no-wrap
#| msgid "System administration"
msgid "cluster installation"
msgstr "Системное администрирование"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:5159
#, no-wrap
msgid "high-performance computing, HPC"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:5160
#, no-wrap
msgid "HPC, high-performance computing"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5166
msgid "Guix is appealing to scientists and @acronym{HPC, high-performance computing} practitioners: it makes it easy to deploy potentially complex software stacks, and it lets you do so in a reproducible fashion---you can redeploy the exact same software on different machines and at different points in time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5172
msgid "In this chapter we look at how a cluster sysadmin can install Guix for system-wide use, such that it can be used on all the cluster nodes, and discuss the various tradeoffs@footnote{This chapter is adapted from a @uref{https://hpc.guix.info/blog/2017/11/installing-guix-on-a-cluster/, blog post published on the Guix-HPC web site in 2017}.}."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:5176
msgid "Here we assume that the cluster is running a GNU/Linux distro other than Guix System and that we are going to install Guix on top of it."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5192
msgid "The recommended approach is to set up one @emph{head node} running @command{guix-daemon} and exporting @file{/gnu/store} over NFS to compute nodes."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5202
msgid "Remember that @command{guix-daemon} is responsible for spawning build processes and downloads on behalf of clients (@pxref{Invoking guix-daemon,,, guix, GNU Guix Reference Manual}), and more generally accessing @file{/gnu/store}, which contains all the package binaries built by all the users (@pxref{The Store,,, guix, GNU Guix Reference Manual}).  ``Client'' here refers to all the Guix commands that users see, such as @code{guix install}.  On a cluster, these commands may be running on the compute nodes and we'll want them to talk to the head node's @code{guix-daemon} instance."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5207
msgid "To begin with, the head node can be installed following the usual binary installation instructions (@pxref{Binary Installation,,, guix, GNU Guix Reference Manual}).  Thanks to the installation script, this should be quick.  Once installation is complete, we need to make some adjustments."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5215
msgid "Since we want @code{guix-daemon} to be reachable not just from the head node but also from the compute nodes, we need to arrange so that it listens for connections over TCP/IP.  To do that, we'll edit the systemd startup file for @command{guix-daemon}, @file{/etc/systemd/system/guix-daemon.service}, and add a @code{--listen} argument to the @code{ExecStart} line so that it looks something like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5224
#, no-wrap
msgid ""
"ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon \\\n"
"    --build-users-group=guixbuild \\\n"
"    --listen=/var/guix/daemon-socket/socket --listen=0.0.0.0\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5229
#, no-wrap
msgid "ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --listen=/var/guix/daemon-socket/socket --listen=0.0.0.0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5233
msgid "For these changes to take effect, the service needs to be restarted:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5237
#, no-wrap
msgid ""
"systemctl daemon-reload\n"
"systemctl restart guix-daemon\n"
msgstr ""
"systemctl daemon-reload\n"
"systemctl restart guix-daemon.service\n"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:5246
msgid "The @code{--listen=0.0.0.0} bit means that @code{guix-daemon} will process @emph{all} incoming TCP connections on port 44146 (@pxref{Invoking guix-daemon,,, guix, GNU Guix Reference Manual}). This is usually fine in a cluster setup where the head node is reachable exclusively from the cluster's local area network---you don't want that to be exposed to the Internet!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5251
msgid "The next step is to define our NFS exports in @uref{https://linux.die.net/man/5/exports,@file{/etc/exports}} by adding something along these lines:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5256
#, no-wrap
msgid ""
"/gnu/store    *(ro)\n"
"/var/guix     *(rw, async)\n"
"/var/log/guix *(ro)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5263
msgid "The @file{/gnu/store} directory can be exported read-only since only @command{guix-daemon} on the master node will ever modify it.  @file{/var/guix} contains @emph{user profiles} as managed by @code{guix package}; thus, to allow users to install packages with @code{guix package}, this must be read-write."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5273
msgid "Users can create as many profiles as they like in addition to the default profile, @file{~/.guix-profile}.  For instance, @code{guix package -p ~/dev/python-dev -i python} installs Python in a profile reachable from the @code{~/dev/python-dev} symlink.  To make sure that this profile is protected from garbage collection---i.e., that Python will not be removed from @file{/gnu/store} while this profile exists---, @emph{home directories should be mounted on the head node} as well so that @code{guix-daemon} knows about these non-standard profiles and avoids collecting software they refer to."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5278
msgid "It may be a good idea to periodically remove unused bits from @file{/gnu/store} by running @command{guix gc} (@pxref{Invoking guix gc,,, guix, GNU Guix Reference Manual}).  This can be done by adding a crontab entry on the head node:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5281
#, no-wrap
msgid "root@@master# crontab -e\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5285
msgid "... with something like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5290
#, no-wrap
msgid ""
"# Every day at 5AM, run the garbage collector to make sure\n"
"# at least 10 GB are free on /gnu/store.\n"
"0 5 * * 1  /usr/local/bin/guix gc -F10G\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5293
msgid "We're done with the head node! Let's look at compute nodes now."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5300
msgid "First of all, we need compute nodes to mount those NFS directories that the head node exports.  This can be done by adding the following lines to @uref{https://linux.die.net/man/5/fstab,@file{/etc/fstab}}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5305
#, no-wrap
msgid ""
"@var{head-node}:/gnu/store    /gnu/store    nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/guix     /var/guix     nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/log/guix /var/log/guix nfs  defaults,_netdev,vers=3 0 0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5311
msgid "... where @var{head-node} is the name or IP address of your head node.  From there on, assuming the mount points exist, you should be able to mount each of these on the compute nodes."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5317
msgid "Next, we need to provide a default @command{guix} command that users can run when they first connect to the cluster (eventually they will invoke @command{guix pull}, which will provide them with their ``own'' @command{guix} command).  Similar to what the binary installation script did on the head node, we'll store that in @file{/usr/local/bin}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5322
#, no-wrap
msgid ""
"mkdir -p /usr/local/bin\n"
"ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix \\\n"
"      /usr/local/bin/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5326
msgid "We then need to tell @code{guix} to talk to the daemon running on our master node, by adding these lines to @code{/etc/profile}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5330
#, no-wrap
msgid ""
"GUIX_DAEMON_SOCKET=\"guix://@var{head-node}\"\n"
"export GUIX_DAEMON_SOCKET\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5335
msgid "To avoid warnings and make sure @code{guix} uses the right locale, we need to tell it to use locale data provided by Guix (@pxref{Application Setup,,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5339
#, no-wrap
msgid ""
"GUIX_LOCPATH=/var/guix/profiles/per-user/root/guix-profile/lib/locale\n"
"export GUIX_LOCPATH\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5344
#, no-wrap
msgid ""
"# Here we must use a valid locale name.  Try \"ls $GUIX_LOCPATH/*\"\n"
"# to see what names can be used.\n"
"LC_ALL=fr_FR.utf8\n"
"export LC_ALL\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5352
msgid "For convenience, @code{guix package} automatically generates @file{~/.guix-profile/etc/profile}, which defines all the environment variables necessary to use the packages---@code{PATH}, @code{C_INCLUDE_PATH}, @code{PYTHONPATH}, etc.  Likewise, @command{guix pull} does that under @file{~/.config/guix/current}.  Thus it's a good idea to source both from @code{/etc/profile}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5360
#, no-wrap
msgid ""
"for GUIX_PROFILE in \"$HOME/.config/guix/current\" \"$HOME/.guix-profile\"\n"
"do\n"
"  if [ -f \"$GUIX_PROFILE/etc/profile\" ]; then\n"
"    . \"$GUIX_PROFILE/etc/profile\"\n"
"  fi\n"
"done\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5364
msgid "Last but not least, Guix provides command-line completion notably for Bash and zsh.  In @code{/etc/bashrc}, consider adding this line:"
msgstr ""

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:5367
#, no-wrap
msgid ". /var/guix/profiles/per-user/root/current-guix/etc/bash_completion.d/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5370
msgid "Voilà!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5373
msgid "You can check that everything's in place by logging in on a compute node and running:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5376
#, no-wrap
msgid "guix install hello\n"
msgstr "guix install hello\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5382
msgid "The daemon on the head node should download pre-built binaries on your behalf and unpack them in @file{/gnu/store}, and @command{guix install} should create @file{~/.guix-profile} containing the @file{~/.guix-profile/bin/hello} command."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:5384
#, no-wrap
msgid "Network Access"
msgstr "Сетевой доступ"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5389
msgid "Guix requires network access to download source code and pre-built binaries.  The good news is that only the head node needs that since compute nodes simply delegate to it."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5395
msgid "It is customary for cluster nodes to have access at best to a @emph{white list} of hosts.  Our head node needs at least @code{ci.guix.gnu.org} in this white list since this is where it gets pre-built binaries from by default, for all the packages that are in Guix proper."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5400
msgid "Incidentally, @code{ci.guix.gnu.org} also serves as a @emph{content-addressed mirror} of the source code of those packages.  Consequently, it is sufficient to have @emph{only} @code{ci.guix.gnu.org} in that white list."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5409
msgid "Software packages maintained in a separate repository such as one of the various @uref{https://hpc.guix.info/channels, HPC channels} are of course unavailable from @code{ci.guix.gnu.org}.  For these packages, you may want to extend the white list such that source and pre-built binaries (assuming this-party servers provide binaries for these packages) can be downloaded.  As a last resort, users can always download source on their workstation and add it to the cluster's @file{/gnu/store}, like this:"
msgstr ""

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:5413
#, no-wrap
msgid ""
"GUIX_DAEMON_SOCKET=ssh://compute-node.example.org \\\n"
"  guix download http://starpu.gforge.inria.fr/files/starpu-1.2.3/starpu-1.2.3.tar.gz\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5417
msgid "The above command downloads @code{starpu-1.2.3.tar.gz} @emph{and} sends it to the cluster's @code{guix-daemon} instance over SSH."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5424
msgid "Air-gapped clusters require more work.  At the moment, our suggestion would be to download all the necessary source code on a workstation running Guix.  For instance, using the @option{--sources} option of @command{guix build} (@pxref{Invoking guix build,,, guix, GNU Guix Reference Manual}), the example below downloads all the source code the @code{openmpi} package depends on:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5427
#, no-wrap
msgid ""
"$ guix build --sources=transitive openmpi\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5429
#, no-wrap
msgid ""
"@dots{}\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5441
#, no-wrap
msgid ""
"/gnu/store/xc17sm60fb8nxadc4qy0c7rqph499z8s-openmpi-1.10.7.tar.bz2\n"
"/gnu/store/s67jx92lpipy2nfj5cz818xv430n4b7w-gcc-5.4.0.tar.xz\n"
"/gnu/store/npw9qh8a46lrxiwh9xwk0wpi3jlzmjnh-gmp-6.0.0a.tar.xz\n"
"/gnu/store/hcz0f4wkdbsvsdky3c0vdvcawhdkyldb-mpfr-3.1.5.tar.xz\n"
"/gnu/store/y9akh452n3p4w2v631nj0injx7y0d68x-mpc-1.0.3.tar.gz\n"
"/gnu/store/6g5c35q8avfnzs3v14dzl54cmrvddjm2-glibc-2.25.tar.xz\n"
"/gnu/store/p9k48dk3dvvk7gads7fk30xc2pxsd66z-hwloc-1.11.8.tar.bz2\n"
"/gnu/store/cry9lqidwfrfmgl0x389cs3syr15p13q-gcc-5.4.0.tar.xz\n"
"/gnu/store/7ak0v3rzpqm2c5q1mp3v7cj0rxz0qakf-libfabric-1.4.1.tar.bz2\n"
"/gnu/store/vh8syjrsilnbfcf582qhmvpg1v3rampf-rdma-core-14.tar.gz\n"
"…\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5445
msgid "(In case you're wondering, that's more than 320@ MiB of @emph{compressed} source code.)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5448
msgid "We can then make a big archive containing all of this (@pxref{Invoking guix archive,,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:5453
#, no-wrap
msgid ""
"$ guix archive --export \\\n"
"    `guix build --sources=transitive openmpi` \\\n"
"    > openmpi-source-code.nar\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5457
msgid "@dots{} and we can eventually transfer that archive to the cluster on removable storage and unpack it there:"
msgstr ""

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:5460
#, no-wrap
msgid "$ guix archive --import < openmpi-source-code.nar\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5464
msgid "This process has to be repeated every time new source code needs to be brought to the cluster."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5468
msgid "As we write this, the research institutes involved in Guix-HPC do not have air-gapped clusters though. If you have experience with such setups, we would like to hear feedback and suggestions."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:5470
#, no-wrap
msgid "Disk Usage"
msgstr "Использование диска"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:5472
#, no-wrap
msgid "disk usage, on a cluster"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5479
msgid "A common concern of sysadmins' is whether this is all going to eat a lot of disk space.  If anything, if something is going to exhaust disk space, it's going to be scientific data sets rather than compiled software---that's our experience with almost ten years of Guix usage on HPC clusters.  Nevertheless, it's worth taking a look at how Guix contributes to disk usage."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5484
msgid "First, having several versions or variants of a given package in @file{/gnu/store} does not necessarily cost much, because @command{guix-daemon} implements deduplication of identical files, and package variants are likely to have a number of common files."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5491
msgid "As mentioned above, we recommend having a cron job to run @code{guix gc} periodically, which removes @emph{unused} software from @file{/gnu/store}. However, there's always a possibility that users will keep lots of software in their profiles, or lots of old generations of their profiles, which is ``live'' and cannot be deleted from the viewpoint of @command{guix gc}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5495
msgid "The solution to this is for users to regularly remove old generations of their profile. For instance, the following command removes generations that are more than two-month old:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5498
#, no-wrap
msgid "guix package --delete-generations=2m\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5503
msgid "Likewise, it's a good idea to invite users to regularly upgrade their profile, which can reduce the number of variants of a given piece of software stored in @file{/gnu/store}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5507
#, no-wrap
msgid ""
"guix pull\n"
"guix upgrade\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5513
msgid "As a last resort, it is always possible for sysadmins to do some of this on behalf of their users. Nevertheless, one of the strengths of Guix is the freedom and control users get on their software environment, so we strongly recommend leaving users in control."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:5515
#, no-wrap
msgid "Security Considerations"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:5517
#, no-wrap
msgid "security, on a cluster"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5522
msgid "On an HPC cluster, Guix is typically used to manage scientific software.  Security-critical software such as the operating system kernel and system services such as @code{sshd} and the batch scheduler remain under control of sysadmins."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5527
msgid "The Guix project has a good track record delivering security updates in a timely fashion (@pxref{Security Updates,,, guix, GNU Guix Reference Manual}).  To get security updates, users have to run @code{guix pull && guix upgrade}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5533
msgid "Because Guix uniquely identifies software variants, it is easy to see if a vulnerable piece of software is in use. For instance, to check whether the glibc@ 2.25 variant without the mitigation patch against ``@uref{https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt,Stack Clash}'', one can check whether user profiles refer to it at all:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5536
#, no-wrap
msgid "guix gc --referrers /gnu/store/…-glibc-2.25\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5540
msgid "This will report whether profiles exist that refer to this specific glibc variant."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:5544
#, no-wrap
msgid "system management"
msgstr "управление системой"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:5545
#, no-wrap
msgid "sysadmin"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5551
msgid "Since Guix does not handle packaging, system configuration and services the way other (more ``classical'') distributions do, some workflows tend to unfold slightly different as we are used to and need slight adjustment.  This chapter intends to help with such manners."
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:5554
msgid "Upgrading from the default postgres."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5563
msgid "With the deprecation of the default value for the postgres package in postgresql-configuration (see b93434e656eba4260df82158a96c295000d3ff44), system upgrades need some manual action before they can take place.  Here's a handy guide on how to."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5569
msgid "Please note that this is a straight-forward way for smaller datasets.  For larger databases @url{https://www.postgresql.org/docs/current/pgupgrade.html, @code{pg_upgrade}} may be the better choice.  Handling the service and system upgrade as described in this guide still applies, though."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5573
msgid "Stop and disable cuirass."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5575
msgid "Prevent the service from starting and failing after a reconfiguration:"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix-cookbook.texi:5577
msgid "sudo herd stop cuirass && sudo herd disable cuirass"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5580
msgid "Dump the database contents."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix-cookbook.texi:5582
msgid "sudo su - postgres -s /bin/sh -c pg_dumpall > /tmp/pg.dump"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5585
msgid "Add or alter the postgres service."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5591
msgid "Depending on whether your postgres service is defined implicitly (through the dependency from the cuirass service) or its own entry in your operating system's @code{(services)} property, you need to either add or alter the already existing configuration to reflect your intended version upgrade."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5595
msgid "Be careful not to upgrade directly to postgres-16 -- cuirass service for some reason doesn't like that.  I had to find and purge the relevant files and then re-initialize after a failed upgrade to postgres 16."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:5600
#, no-wrap
msgid ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql (@@ (gnu packages databases) postgresql-15))))\n"
msgstr ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql (@@ (gnu packages databases) postgresql-15))))\n"

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5605
msgid "Note: If you for some reason didn't read the text here but somewhat blindly followed the examples and @emph{did upgrade to 16}, here's how you reset the state:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5609
msgid "Delete the database instance files."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5611
msgid "They default to live under @file{/var/lib/postgres/data}."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5614
msgid "Re-initialize postgres."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix-cookbook.texi:5617
msgid "sudo su - postgres -s /bin/sh -c 'pg_ctl init -D /var/lib/postgres/data'"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5621
msgid "Reconfigure your system."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix-cookbook.texi:5623
msgid "sudo guix system reconfigure path/to/your/altered/config.scm"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5626
msgid "Restore database contents."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix-cookbook.texi:5628
msgid "sudo su - postgres -s /bin/sh -c 'psql -d postgres -f /tmp/pg.dump'"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:5631
msgid "Enable and start the service."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:5635
#, no-wrap
msgid ""
"sudo herd enable cuirass\n"
"sudo herd start cuirass\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5651
msgid "Guix is based on the @uref{https://nixos.org/nix/, Nix package manager}, which was designed and implemented by Eelco Dolstra, with contributions from other people (see the @file{nix/AUTHORS} file in Guix.)  Nix pioneered functional package management, and promoted unprecedented features, such as transactional package upgrades and rollbacks, per-user profiles, and referentially transparent build processes.  Without this work, Guix would not exist."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5654
msgid "The Nix-based software distributions, Nixpkgs and NixOS, have also been an inspiration for Guix."
msgstr "Дистрибутивы, основанный на Nix, Nixpkgs and NixOS, также были источником вдохновения для Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5660
msgid "GNU@tie{}Guix itself is a collective work with contributions from a number of people.  See the @file{AUTHORS} file in Guix for more information on these fine people.  The @file{THANKS} file lists people who have helped by reporting bugs, taking care of the infrastructure, providing artwork and themes, making suggestions, and more---thank you!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:5665
msgid "This document includes adapted sections from articles that have previously been published on the Guix blog at @uref{https://guix.gnu.org/blog} and on the Guix-HPC blog at @uref{https://hpc.guix.info/blog}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:5670
#, no-wrap
msgid "license, GNU Free Documentation License"
msgstr "лицензия, GNU Free Documentation License"

#. type: include
#: guix-git/doc/guix-cookbook.texi:5671
#, no-wrap
msgid "fdl-1.3.texi"
msgstr "fdl-1.3.texi"
